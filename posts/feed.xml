<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 不是追风少年</title><link>https://blog.formalscience.com/posts/</link><description>Recent content in Posts on 不是追风少年</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 06 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.formalscience.com/posts/feed.xml" rel="self" type="application/rss+xml"/><item><title>此日有意义</title><link>https://blog.formalscience.com/2023/03/06/2023-03-06_%E6%AD%A4%E6%97%A5%E6%9C%89%E6%84%8F%E4%B9%89/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2023/03/06/2023-03-06_%E6%AD%A4%E6%97%A5%E6%9C%89%E6%84%8F%E4%B9%89/</guid><description>最近不知怎么，情绪起起伏伏。根据最近听的一个生物学播客，我想这是多巴胺水平在上下涌动。那集播客讲不能过分激发自己的多巴胺水平，例如一周竭力工作七天，因为这种生物性资源需要时间恢复，消耗得越狠，恢复得越慢。
有时候感受不到生活的意义，再加上冷风一吹，身体带着精神一起向内缩起，连去添把柴取暖的动力都没有。这个时候不知道周围的人在干啥，不知道远方的朋友在干啥。看到他们发朋友圈有开心的事情，有的有点颓丧，有的是太过长久的沉默。不能见面吃个饭讲一下，只有记忆。但大家也不是孤岛，能感觉到精神还是连在一起的。船和船虽然没有麻绳连在一起，但无线电台的开关还为彼此开着，在波峰诡谲的海面上也还更稳一些。
最后，石头也会发芽
也会粗糙地微笑
在阳光和树影间
露出善良的牙齿</description></item><item><title>A Not-Detailed 6 Day North Coast 500 Road Trip - 写在最后的话</title><link>https://blog.formalscience.com/2022/11/01/2022-11-01_nc500_end/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/11/01/2022-11-01_nc500_end/</guid><description>开车 小事故 偶遇 焦虑 拍照 吃饭 旅馆 赶路 从高地回来已经已经满一个月。回来后去了一趟哥伦比亚，去的时候是两个红眼航班，回来的时候又是一个带着时差的红眼航班。上周日夏令时取消了，我的时差才逐渐被拉平。 在处理照片的积压任务完成后，我终于松了一口气，然而还要继续写游记。在写的过程中，开始模糊的记忆再次被翻腾起来，暂时变成可以被文字描述的画面。
现在就直接跳到最后的总结吧。
开车 很难定义我的开车水平，因为基本没有被检验过。所以我不开车，只坐车。但坐车就难免对另一个人产生依赖。我这趟行程中许多车上时光都在观察前方路况，一是防止我们开到道路右侧，发生不可接受的后果，二是要在兄弟看风景的时候接管预警职责。还好全程除了经过一个镇子的时候把门把手蹭了，没有出现其他的刚性碰撞。
小事故 在 Ullapool 到 Applecross 路上有个岔路口，我们走过了几十米。然后就是倒车。路边有排水渠（ditch），在进去前一秒我就有种不太好的预感，还没来得及有啥意见发表，车的左后方已经陷了进去。打滑是必然的，车开出不来也是显而易见的。兄弟一边打电话，按照语音提示一步步和客服系统对话，我一边找点石头垫一下轮胎。这个时候英国人的热情就体现出来了，很快就有一家人停下来帮助我们，用木头插入轮胎下面增大一些摩擦。没用，还甩了我一身泥，而带着泥的外套我大约穿了三周后才洗掉。后来有个房车过来，大爷用一根绳子试图拉我们出来。绳子断了，他们遗憾地走了。但之前的那家人继续帮我们拦车，另一辆房车用更结实的绳子把我们救了出来。期间还有人负责指挥交通，因为道路很窄，实在过不去大家就在前后面等一下。
偶遇 一切尘埃落定后，我们拐进了那段“有挑战”的公路。路上遇到了另一辆轮胎爆掉的车，让我们帮忙传达求救信息，因为事故地点没有信号。我们记录下信息，然后就继续向前开，直到到了有信号的地方打了求救电话。后面的事情我们不知道，但希望他及时得到了帮助。
巧合的是我们开到一片海滩的时候，虽然时间比较晚了，但是我们还是要去拍照，然后发现了第一辆试图帮助我们的房车，那个大爷大妈估计是去海边散步了，等了一会儿没等到，只是和其他人搭讪了几句。我们决定不等了，开出路口兄弟直接左转。喝止住后，我们又掉头，路过路口发现两个人影。我们决定再回去看看，终于等到了他们，表达了感谢交谈了几句。
焦虑 自己出去玩的时候，我是随性派，基本上非常散漫，就像水面浮叶，逐波而行。和别人一起出行的时候，我属于旅途中不停规划的紧张派，希望不要错过预定的时间节点。而我们这趟边玩边规划的旅程前半段让我不断纠结，因为每个地点都超时。兄弟不断提醒我，“你怎么这么紧张啊”。经过提醒后，我也意识到这点，开始觉得好像没什么大不了的，终点总会达到。达到终点后，吃饭、洗澡、聊天、睡觉。第二天起床继续行程，问题不大。心情就放松了很多。
拍照 拍照开心，处理照片累，看照片开心。日后看照片还会继续开心。结论是还是要多拍。我自认拍照水平还可以，看到自己一路被拍的照片，也觉得自己应该也是能让身边的人有所提升的。
吃饭 还是要吃点好的，但好的馆子需要点运气才能遇到，这点不能强求。旅途中的早餐基本都是英式早餐，晚餐基本都是英式快餐（汉堡、鱼和薯条）。我除了在 Lochcarron 的一个小酒馆喝了一杯本地啤酒，没有摄入其他酒精饮料。不过慢慢地吃煎蛋、培根、面包，喝点咖啡，也是不错的早餐 ……
旅馆 在 Ullapool 住了美国口音黑人大姐的湖景旅馆，那个早餐每人 15 镑是真的贵，不过雨中的湖景也是真的很漂亮。在 Lochcarron 住了只有几个房间的家庭小旅馆，她家一层客厅的环绕沙发让兄弟很羡慕。在 Thurso 住的普普通通的旅馆，早餐提前半小时结束，因为厨师要去休假。这家旅馆早餐提供了很大颗的蓝莓。也住了一个汽车旅馆，吃得一般，睡得也一般，也并不便宜。
赶路 我们其实每天都在赶路，特别是夜路，包括在盘山单行道上极限狂奔，在 A82 上跟着大货车开，在苏格兰北部海岸线上睡眼惺忪地开。白天就是随性开，超速开。
如果不是司机的坚持，我们这趟旅程也不会有这么多故事可以回味。生命中的一些趣味就是这样一个个的偶然构成的。所以我不想自己的生活倒带重来，因为有些人也许不能再相遇。兄弟回去自然是很不舍，但想到再次相逢，开启新的旅程，又有了一些期待。
最后，石头也会发芽
也会粗糙地微笑
在阳光和树影间
露出善良的牙齿</description></item><item><title>A Not-Detailed 6 Day North Coast 500 Road Trip</title><link>https://blog.formalscience.com/2022/10/27/2022-10-27_nc500/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/10/27/2022-10-27_nc500/</guid><description>Day 1 Inverness 到 Thurso - 住宿（White Cottage） Day 1 Inverness 到 Thurso - Fyrish Monument Day 1 Inverness 到 Thurso - Carn Laith Broch Day 1 Inverness 到 Thurso - Whaligoe Steps Day 1 Inverness 到 Thurso - Duncansby Head Duncansby Head Lighthouse Duncansby Bird-Cliffs Duncansby Stacks The North Coast 500 (NC 500)，是一条 2015 年开发的高地沿海自驾新线，被誉为苏格兰最好的自驾路线。因为 NC500 独特的路况和与众不同的风景，它自发布以来，一直受到了很多自驾爱好者的青睐。比如阿斯顿·马丁公司还在 2018 年推出了全国只有 12 辆的 NC500 系列。
该线路以高地中枢因弗内斯（Inverness）为起点和终点，沿海岸线绕行一圈全程约 500 英里（约合 800 公里），涵盖了苏格兰北部几乎所有的自然及人文景观。 苏格兰高地人烟稀少、沿途道路宽阔、风景优美，在苏格兰北部海岸公路上体验极致的驾驶乐趣，还能邂逅可爱的动物们。这条自驾路线竣工伊始即被称为世界最美六大沿海公路之一。</description></item><item><title>k8s 中 ingress 相关的一些操作，以及 GKE 中的一些特殊配置</title><link>https://blog.formalscience.com/2022/09/15/2022-09-15_ingress-k8s/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/09/15/2022-09-15_ingress-k8s/</guid><description>根据 NGINX Ingress or GKE Ingress?
Ingress 是管理向集群中 service 的外部访问的一个 API 对象，特别是 http(s) 的访问。一般由两个组件构成：
Ingress resoruce：提供路由规则 Ingress controller：实施这些路由规则 每种 Ingress Controller 通常有自己的特性集合和设置方法（一般是通过 annotations 进行配置）。
新建一个 Nginx Ingress helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm install nginx-ingress ingress-nginx/ingress-nginx If there is already an Nginx Ingress in the cluster, try to create another one.
kubectl create namespace ingress-nginx-2 helm install ingress-nginx-2-native ingress-nginx/ingress-nginx \ --namespace ingress-nginx-2 \ --set controller.ingressClassResource.name=nginx-2-lb \ --set controller.</description></item><item><title>光</title><link>https://blog.formalscience.com/2022/08/22/2022-08-22_shadow_light/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/08/22/2022-08-22_shadow_light/</guid><description>我躺坐在椅子上，眼镜盯着屋顶的灯管，有些耀眼，但可以承受。
我把连帽衫的帽子扣在头上，遮住眼睛，开始小憩。
有时候不看到光比较好。
生活中有一盏灯，熄灭了就进入完全的黑暗 生活中有很多灯，只要换个地方还是亮堂堂
东方不亮西方亮，里屋不亮外屋亮
光驱散阴影，也制造了阴影
爱掩盖了孤独，也揭露了孤独
前行的步伐驱动的是遗忘</description></item><item><title>二舅们不愤怒，所以你才要愤怒</title><link>https://blog.formalscience.com/2022/07/28/2022-07-28_peaceful_uncles/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/07/28/2022-07-28_peaceful_uncles/</guid><description>我相信很多人身边没有类似“二舅”的人。要么他们的“二舅”们生活没这么坎坷，要们他们的“二舅”们没有这么乐观，要么他们的“二舅”们没有这么多技能。
“二舅”的故事治愈不了我。二舅们办不下残疾证，二舅们的养老金比城市里的人少，我认为是这个社会太不公平，因此只会让我更加愤怒。
我也是别人的老舅、二舅、表舅，我不希望我将来去治愈谁。</description></item><item><title>夏夜音乐会</title><link>https://blog.formalscience.com/2022/07/06/2022-07-06_concert_mid_summer/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/07/06/2022-07-06_concert_mid_summer/</guid><description>夏夜并不是黑夜，天空一直闪耀着欢愉，直到十点钟。音乐会在七点半开始，于九点半结束，有五首曲子。
PROGRAMME
Rossini, L’italiana in Algeri overture Haydn, Symphony No 94, ‘Surprise’ Dvorak, Humoresque No 7 Kabalevsky, The Comedians Smetana, Má vlast, No 3, Šárka 我只认识德沃夏克的七号幽默曲，其他的都赶快去 YouTube 上补习了一下，确认都没听过。
演出在运河边的一个圣公会教堂进行。之前一次散步时路过这个教堂，听到里面有琴声，走进去看到墙上的 Wi-Fi 密码，就上了一会儿网。
曲目🎵都很令人欢愉，当然也有点催眠，我只能闭着眼睛跟着摇晃。后来坐在旁边的同伴也说，这就是交响乐的一点好处，困了可以跟着节奏晃。演出的人员里也有朋友，只是前面的曲目里她在我们视线盲区。后来的表演她是钢琴位置，就可以看到了。德沃夏克的幽默曲开始演奏时，我有熟悉的感觉，很愉快。后面的 Kabalevsky, The Comedians，也非常有趣，感觉像在一个热闹的集市上走马观花，还有人耍杂耍。一开始觉得五首曲目怎么演两个小时呢？后来还真的差不多两个小时，中间有一个休息环节，大家重新布置乐器。
开始演奏的时候，阳光还从教堂的彩色窗子里倾泻进来。结束时走出去，就是红彤彤的晚霞了。
最近认识了一些新朋友，就会有人想知道我为什么叫跳跳。我讲了我听到的故事，但谁知道这个故事是不是真的呢？毕竟我还有其他的称号。不同的人眼中的我是不一样的，我眼中的我肯定也很独特。
少年在夏夜醒来，做了一个潮湿闷热的梦。树叶婆娑，蝉鸣有意，流水无情。</description></item><item><title>巨大的月亮</title><link>https://blog.formalscience.com/2022/06/14/2022-06-14_moon/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/06/14/2022-06-14_moon/</guid><description>今夜无诗
此岸彼岸
拍得月亮一个几个
何事长向别时圆【1】
难言欢乐</description></item><item><title>春天</title><link>https://blog.formalscience.com/2022/06/13/2022-06-13_spring/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/06/13/2022-06-13_spring/</guid><description>春天
是什么样的季节？
等夏天才问
等逝去再颂吟
向寒冷的地方奔跑
有些地方
没有春天
搂搂抱抱 这样就好</description></item><item><title>分母</title><link>https://blog.formalscience.com/2022/06/06/2022-06-06_price_of_love/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/06/06/2022-06-06_price_of_love/</guid><description>爱一个人
没有性价比
爱是无价
性很常见
来来往往中
他成了分子
你成了分母
希望散布在爱情之上 $👀/❤️$
唉，无穷∞的寂寞</description></item><item><title>无题</title><link>https://blog.formalscience.com/2022/05/24/2022-05-24_untitled/</link><pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/05/24/2022-05-24_untitled/</guid><description>喜欢一人
伸出灵魂触及
枝蔓缠绕
断开时刻
丢失亦获得些许肢体
故园土地
根深埋地底
移居他所
非昔日水与气
分离
​习惯了
只是平常而已</description></item><item><title>2022 Oxford Mayday</title><link>https://blog.formalscience.com/2022/05/01/2022-05-01_mayday_oxford/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2022/05/01/2022-05-01_mayday_oxford/</guid><description>三月初的时候，感觉五月还很遥远，没想到现在已经五月了。从过去遥望未来，总是觉得真实性不足，没想到未来一下变成了过去。
昨晚失眠，但睡前做了拉伸，这两种行为产生了后果。现在身体放松但头脑晕晕，失眠的时候身体还躺在床上，它们都得到了应得的结果。吃完早饭出门，天空阴沉，开始下一点小雨，空气中弥漫着泥土的味道。地上有诗歌卡片，看落款标明是街道新冠时期征集的。本来贴在墙上的，有些脱落躺在了地上。一些人家门口摆放了鲜花桶，庆祝 Mayday 到来。
Oxford Mayday 有自己特殊的活动，在 Magdalen 学院塔楼上有唱诗班，早上六点唱诗，然后鸣钟 20 分钟。这周下班前，同事告诉我们这个活动，说是会人山人海。昨天失眠时，也在想要不要去。最后感觉心理上没有建立起足够的联结感，后面就决定不去了。这个决定也没有让我更快速入睡。早上醒来六点多，又睡到八点。看了一些 Twitter 新闻（自己主动搜的），唱诗还是有点趣味，后悔情绪开始冒头，也许应该去看看的。
不过过了一会儿，情绪就淡了，根据经验这种感觉会逐渐被遗忘，如同平息的涟漪。昨天晚上失眠后发了一条朋友圈，讲自己在郁闷中失眠，早上小师兄还问我怎么了。大概是因为自己生活停滞不前，所以总会有这种时而反复的忧愁吧。遗憾的情绪，也终将被遗忘，只剩下淡淡的欢乐。这个五月清晨，带着清新的有泥土气味。</description></item><item><title>2020 生活规划</title><link>https://blog.formalscience.com/2020/01/01/2020-01-01_2020-guidelines/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2020/01/01/2020-01-01_2020-guidelines/</guid><description>指导原则 适当精简，包括日常生活用品，生活中从事的事情，工作中要处理的事情，自己阅读、观影等时间话费，感情方面也是重要一环，把精力放在有价值的关系上。
身体健康 读书、读论文 多游览各方 创作（文学、摄影）</description></item><item><title>爱丁堡租房</title><link>https://blog.formalscience.com/2019/09/24/2019-09-24-rent-in-edinburgh/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2019/09/24/2019-09-24-rent-in-edinburgh/</guid><description>生活就是一场旅行，这算是一个重大决定。到爱丁堡工作已经一周，时差基本倒过来了。 第一周住在酒店，最紧迫的事情就是租房，因为后续用来发工资的银行卡、办理警察局的手续都需要一个租房地址。
出国前了解过这边的租房市场，主要通过 Zoopla 或者 Rightmove 等软件。不过都是隔岸观火，还是要实地考察才靠谱。 这边看房不像国内有一个看房小哥，一下午能带你看十几套房子。 我在软件上看到想去瞧一下的房子，都是要打电话去预约、APP 内发消息等。 等收到电话回访或者邮件回复后，约定一个看房时间（viewing arrangement），然后去看房。 一般会有很多人一起看房，热门的房型可能会有十几人。不过中介机构也不会无限量地拉人看房，有时就告诉你没有看房名额了。 等看房满意后就可以邮件或者网站填写申请，如果房主（landlord）同意，那么就可以交定金成交了。
房租一般根据地理位置、装修等价格会有一些差别。 本来最初的目标是租一个一人间，比较难租到。后来和同事商量后，租了一个两人间。
听同事讲爱丁堡房产的租售比不错，也许可以考虑在这边投资一下房子。</description></item><item><title>To Bangkok</title><link>https://blog.formalscience.com/2019/02/17/2019-02-17_to_bangkok/</link><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2019/02/17/2019-02-17_to_bangkok/</guid><description>普通落地签证/Visa on Arrival (VOA) 落地签需要的条件 签证有效期 电子落地签证/E-Visa on Arrival(E-VOA) 实际操作 换汇 实际操作 实用信息 普通落地签证/Visa on Arrival (VOA) 中国公民适用普通落地签政策，相关政策链接：
http://www.thaiembassy.com/thailand/visa-on-arrival.php
《申请表》(Application forVisa on Arrival)、1张白/蓝底4*6cm照片、15天内往返机票、有效期超过6个月的护照。(注：表格可下载并事先用英文填好;在泰如无联系人，可填写拟住酒店地址、电话)。 签证申请费每人1000铢。现场拍照另交费。申请落地签时，需备1万铢、每个家庭2万铢或等值外币以证明旅游期间有经济能力。泰移民官将抽查。 落地签需要的条件 持有泰国政府批准国家的护照者。 护照必须是真实的，不低于 30 天有效期。 泰国旅游的期限不超过 15 天。 有到达泰国时，不超过 15 天的回程机票。 报实际和能查询的泰国地址。 非佛历 2522 年的入境黑名单者 签证费仅收泰铢（现金）/不可退款 入境时个人必须随身携有外币不低于 10,000 泰铢， 家庭不低于 20,000 泰铢 参考：https://ask.qyer.com/question/788823.html
另外，2019/01/14 到 2020/04/30 落地签时免费的。
签证有效期 落地签有效期15天(包括入境当天)，如为以旅游为目的则不可延期。离境时签证过期需向移民局缴纳罚款，1天500铢，最高不超2万铢。
电子落地签证/E-Visa on Arrival(E-VOA) 根据实际经验，落地泰国后如果走普通落地签的通道，队伍比较长，特别是航班密集落地的时候。 还有一种可以在网上预先申请的电子落地签，较为方便。
优点：
仅需要护照信息 不需要提供实体照片 费用：普通落地签费用 + 提供服务的公司的服务费用
参考：
不排队，1分钟快速入境！泰国电子落地签证（EVOA）申请攻略 不要办e-visa落地签，没有任何意义- 泰国- 论坛- 穷游网 有两家公司可以提供这项服务：</description></item><item><title>Go to Rust （一）</title><link>https://blog.formalscience.com/2018/12/26/2018-12-26-go-to-rust/</link><pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/12/26/2018-12-26-go-to-rust/</guid><description>这几天看了 Rust 文档，把一些概念整理一下。
通过 cargo 新建一个项目，然后去管理其生命流程，这种现代做法很方便。 对于 statement 和 expression 的使用方式和 scheme 有些类似，可以返回最后一个 expression 的值。 可能返回错误的地方使用 Result 类型，很类似 Haskell 的处理流程。 模式匹配的方式很像 Ocaml 。 ownership 机制很新颖，限制能够带来巨大的力量。让我想到了《全职猎人》中对某项能力增加限制条件可以增加这个能力的威力的设定。 Option 类型就是 Haskell 的 Maybe 。 generics 的设计不知道有没有参考 C++ 的 template 概念。 目前只看到文档的第 11 章，Rust 语言的很多概念都能够在其他语言找到对应，只有 ownership 机制是我第一次见到，觉得新颖有趣。</description></item><item><title>pip 离线安装包</title><link>https://blog.formalscience.com/2018/12/13/2018-12-13-pip-install-package-offline/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/12/13/2018-12-13-pip-install-package-offline/</guid><description>1. 使用场景 在没有网络的设备上使用 pip 安装包。下面以 sklearn 包为例展示如何在没有网络的环境下安装包。
2. 下载包到本地缓存 首先进入一个目录，在这个例子里是 /Users/bef0rewind/Downloads/pip-tmp 目录。
pip download sklearn 我这里下载到了一个缓存目录 /Users/bef0rewind/Downloads/pip-tmp，随便选一个就好。pip download 只会下载对应的包，不会进行安装。
此时使用，pip freeze 可以看到已经安装的包，如果之前没有安装过 sklearn，显示的列表里是没有这个包的。
3. 断网安装 为了展示没有网络的情况下如何安装，我断开网络进行了验证。
pip install --no-index --find-links=/Users/bef0rewind/Downloads/pip-tmp sklearn 其中 --find-links 要 pip 从指定的目录里寻找安装包。
4. 其他 如果要用 Python3，而系统默认的版本是 Python 2，则可以将 pip 命令换成 pip3。</description></item><item><title>还在下雨</title><link>https://blog.formalscience.com/2018/12/06/2018-12-06-%E8%BF%98%E5%9C%A8%E4%B8%8B%E9%9B%A8/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/12/06/2018-12-06-%E8%BF%98%E5%9C%A8%E4%B8%8B%E9%9B%A8/</guid><description>早上闹钟还没响，就收到学弟从美东发来的微信消息，高管在加拿大被扣留，感觉刚释放的贸易战缓和信号瞬间消失无影。接着看到同学发送的新闻，张首晟教授去世，又给学弟把这则消息转了过去。
到了公司也没获得更多信息。一天工作下来，解决了几个问题，心情是近来最平静的一天。雨一直下个不停，沿着玻璃幕墙下来，汇成一条条水线流下。
各类信息媒介上也是消息攒动，同样没获得更多有效信息。前段时间看到一个问题：为什么感觉今年逝去的名人特别多？我想，也许是他们的时代逝去了，也许是我们的时代逝去了。
小学、初中、高中的时候喜欢数学和诗歌。现在对一些人向往的“诗意的栖居”这种描述不怎么向往了。在这个世界，不可能所有人都能到达那种美好的彼岸。现实还是要战斗，在枪炮中让玫瑰绽放。
有观点说外面的世界再乱，只要自己的小环境能保持美好就够了。我也不知道要怎么选择，一是我不知道什么叫好的小环境，而是我可能也没能力隔绝外界的干扰，也就无所谓选择。
晚上从公司回来，雨还是在下，风吹在手上冻得不行。
寒冷 / 困顿 / 饥饿
树影 / 摇曳 / 零落
混乱 / 猜测 / 迷惑
启程 / 归来 / 此刻</description></item><item><title>Escape from escape analysis</title><link>https://blog.formalscience.com/2018/11/30/2018-11-30-escape-from-escape-analysis/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/11/30/2018-11-30-escape-from-escape-analysis/</guid><description>1. 逃逸分析背景 Go 语言采用了并发的（Concurrent）、非移动的（Non-Movable）、非分代的（Non-Generational）、基于三色（Tri-color）标记的垃圾回收（Garbage Collection）算法，只在 特定阶段开启写屏障（write barrier）。 特点是全局停顿时间比较少，在一些场景下是十微秒级别的。
垃圾回收算法针对的是堆（heap）中的内存。 为了减少垃圾回收的时间消耗，Go 语言在编译阶段通过静态分析算法对程序的结构进行分析，尽可能讲对象分配在栈上（如果这个对象的生命周期在它定义的函数返回时就结束的话）。 这一算法也利用了 Go 语言在函数传递参数时总是传递参数的值这一个语言特性。
而静态分析不总是完备的，会有一些本来可以分配在栈上的对象被 Go 的编译器分配在了堆上。 如这篇文章《Golang escape analysis》所描述的一些例子一样，有些对象本来可以避免逃逸（Escape，指的是对象被分配在堆上）。
对于某些场景，我们确定一个对象肯定可以（也应当）被分配在栈上，但是它却逃逸了。 这样在某些关键路径上的逃逸的对象会造成大量的分配和垃圾回收。
2. Go 版本 使用的 Go 版本为今晚刚从 master 分支上 pull 下的源码直接构建。
ThinkPad-X1-Carbon:bin bef0rewind$ ./go version go version devel +42e8b9c3a4 Fri Nov 30 15:17:34 2018 +0000 darwin/amd64 3. 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // file: escape.</description></item><item><title>Golang Receiver Type 探索</title><link>https://blog.formalscience.com/2018/11/21/2018-11-21-golang-receiver-type/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/11/21/2018-11-21-golang-receiver-type/</guid><description>1. 参考 在 Go 的官方 spec 中有以下涉及到类型和方法的章节，如果需要了解具体的细节，可以参考阅读。
https://golang.google.cn/ref/spec#Method_sets https://golang.google.cn/ref/spec#Types https://golang.google.cn/ref/spec#Struct_types https://golang.google.cn/ref/spec#Composite_literals 核心的概念是 method sets：
A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other type T consists of all methods declared with receiver type T. The method set of the corresponding pointer type *T is the set of all methods declared with receiver *T or T (that is, it also contains the method set of T).</description></item><item><title>亚庇游记</title><link>https://blog.formalscience.com/2018/10/17/2018-10-17-%E4%BA%9A%E5%BA%87%E6%B8%B8%E8%AE%B0/</link><pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/10/17/2018-10-17-%E4%BA%9A%E5%BA%87%E6%B8%B8%E8%AE%B0/</guid><description>计划很早就定下了，中秋节请了节后一天调休假，去沙巴亚庇玩。航程为：杭州-新加坡-亚庇-杭州，之所以在新加坡转机，是为了和新加坡的同学汇合，一起去马拉西亚。
由于是第一次出国去玩，所以本着自己遇事就慌的态度，还是好好做了一下攻略。主要有以下几部分内容：
1. 玩的内容 2. 出行方式 3. 签证 4. 装备 沙巴州（Negeri Sabah）旧称北婆罗洲，在 1963 年加入马拉西亚，之前一直在英国的统治之下，有风下之乡（Land Below The Wind）的美誉。其首府为亚庇，旧称哥打京那巴鲁（Kota Kinabalu），杭州机场仍然使用这个称呼。主要旅游城市除了首府亚庇外还有仙本那（Semporna），是著名的潜水目的地。由于去往仙本那需要在斗湖（Tawau）转机，而且这次去玩也不是为了 OW 潜水证，因此等以后有机会再造访。
亚庇的景点主要有马来西亚第一高峰（东南亚第五）京那巴鲁山（Mount Kinabalu Gunung Kinabalu）、周围的一些离岛、本地的湿地保护区、清真寺以及一些博物馆。这次计划去京那巴鲁山体验滑翔伞和去美人鱼岛（Mantanani Island）潜水（Discovery Scuba），各自需要耗费一天行程。其他的时间就在市区内逛一下，看看亚庇的物价以及号称可以看到最美落日之一的丹绒亚路海滩。
去新加坡的航班需要新加坡签证，淘宝找旅行社代办即可。去往马来西亚的的航班可以使用 eENTRI 或者 eVisa。我用的 eENTRI，按照规定填写完资料，使用支付宝付款后返回页面就生成了 eENTRI 的文件页。需要注意的是申请资料中提到的往返航班行程单需要事先打印好，过关需要用到。至于酒店预订单，我也打印了，但是没有用到。
机票全部都是在飞猪买的，酷航-亚航-亚航。当然可以去官网买，但是我图省事，以后可以尝试其他购买渠道。酷航的飞机是波音 789，一排九个座位，不拥挤也不宽敞，不舒服也不难受。亚航的是空客 320，座位是皮革材质，稍微舒服一点。由于是廉价航空，机上都没有免费的水和食物，在回杭州的航班上我用 37 元人民币购买了马来椰浆饭，不是很好吃。机上的乘务人员比较专业，在展示安全带和救生衣使用的时候都有动作示范，这是我在乘坐国内航班的时候没有见过的。
杭州萧山机场 T2 异常简陋，出关后只有一些（简陋的）免税店。此时出发的航班大都是廉航的红眼航班。到达新加坡樟宜机场 T2 后在机场换了手机卡，联系了新加坡的同学，简单逛了一下，然后打 Grab 去了东海岸公园。车上师傅跟我聊天，不知道为什么我隐约感觉他可以说中文，但是我俩还是用英语聊了一路。到东海岸公园才六点多吧，看到很多人跑步、骑行。海岸不远处停着许多船。已经有一个大哥拿着单反拍照，似乎是在拍摄日出延时。过了一会儿还有一个女孩子坐到堤坝上和她的狗狗不停自拍。她离开的时候还让我给她和她的狗狗拍了一张照片。我也支起三脚架用手机自拍了一些照片，用单反拍了一些日出（主要是云）和沙滩上呆呆的鸟的照片。
同学赶来后一起吃了点东西（我已经很饿了），很甜的咖啡和已经忘记名字的马来酸甜汤粉。然后就是走路逛了逛，坐公交回了机场 T4。机场高架桥上都是鲜花，路旁都是高大的树，让只见过国内机场的我赞叹不已。需要先到亚航的柜台上盖一个章才能出关，我只带了一个背包，不用受 7kg 的行李额度限制。出关后两个人逛优衣库差点忘了登记时间，结果一件都没买。
亚庇的机场在海边，飞机降落的时候一边是居民房，一边是海，颇为有趣。下了飞机记得走境外旅客的通道，否则离开的时候出关就有麻烦。出了机场打 Grab 到青年旅舍旁边的商场，后来在附近的一个小店吃了海鲜面和酸柑水。这个酸柑水下面是温水，上面是冰块，有种诡异的酸甜。道理上讲这么流行的饮品应该有其独到之处，我确实感觉到有奇妙的味道，只是欣赏不来。海鲜面可能炒糊了。
青年旅舍的老板不会中文，不过同学经验很多，交流完后就办理了入住。稍事休整后去了沙巴州博物馆，花费 15 RM 买票之后，就溜了进去。门厅是个大鲸鱼的骨架，里面比较好玩的是一些原住民乐器还有动物标本模型。动物模型看上去都很生动，布置得也很有趣，还原了一些自然场景。至于其他的展品，会介绍一些沙巴的历史以及与外界的互动交流之类的内容。博物馆外面有个车展，列出了一些老车。除了博物馆本身，附近还有一些其他可逛的地方，比如包含不同族群的本地传统民居还原，其中也有华族的屋子，很有南方传统民居的风味。
离开博物馆后，打 Grab 去了丹绒亚路海滩，时间刚刚好，看了落日。从 First Beach 走到 Second Beach，然后打车去了大茄来海鲜餐厅吃饭，没有点奶油老虎虾。去逛了几个本地市场，说实话感觉比较乡土化，里面各种卖水果、烤串（主要是鸡翅膀之类的）还有旧衣服的商贩。后来离开的时候，同学买了几个莲雾，接下来的几天吃的时候发现味道还不错。
第二天的行程是美人鱼岛深潜、红树林看长鼻猿和萤火虫。同学磨磨唧唧起床后我们坐着小巴车上路了，一路风光接近我老家鲁西北农村。中途停车买东西和吃饭，我们买了一瓶防蚊喷雾，吃了一份面。没吃饱，去买第二份面的时候就没了…… 吃了一个忘记了什么馅儿的包子。到了码头就是等更多的人来，齐了之后坐船。附近有猴子过来讨吃的，导游把它们赶走，否则游客的包有可能被顺走了。上船后，现在河上航行，行驶比较缓慢。因为快艇会在河中掀起浪，冲击到岸边停靠的船，导致船翻倒的话会被投诉。出海后由于我坐在船头，基本上就是船头扬起在落下的循环，每次都是硬着陆的感觉，脊椎受到极大冲击。</description></item><item><title>defer, panic and recover in Golang</title><link>https://blog.formalscience.com/2018/08/21/2018-08-21_golang_exception_handling/</link><pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/08/21/2018-08-21_golang_exception_handling/</guid><description>1. 什么是异常处理 程序在执行过程中有可能出现异常状态，比如获取一个不再有效指针指向的内容、除零等。 一般语言都提供了异常处理机制来应对这些情形，例如 Java 的 try/catch/finally 机制（https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html）、 Python 的 try/raise/except/finally 机制（https://docs.python.org/3/tutorial/errors.html）等。
2. Go 语言中的异常处理机制 Go 语言中使用的是 defer/panic/recover 机制来处理异常。Go 语言官方博客的《Defer, Panic, and Recover》讲述了这个机制的具体应用方式。
还有一些其他教程对这个机制的使用方法、适用场景进行了进一步阐述：
The Right Places To Call The recover Function：https://go101.org/article/panic-and-recover-more.html ，几种使用 recover 恢复 Go 语言中 panic 的适用场景 7.异常处理：https://www.kancloud.cn/liupengjie/go/578555 ，看云发布的 Go 语言教程中涉及到异常处理的章节，里面涉及到很多使用示例细节 如果搜索 “golang 异常处理”，类似的教程有很多。里面的核心思想大体就是：用 defer + recover 处理一个 panic，defer 结构要在 panic 触发之前被定义而且 recover 要直接在在 defer 结构定义的函数中被调用（而不是被直接调用或者在函数内部的其他函数中被调用）。
3. defer 语法糖的部分原理 在讲述 defer 机制的文章中，都会提到一个函数中多个 defer 结构执行的顺序和定义顺序是相反的，即后定义的 defer 结构总是先被执行。为什么会出现这样的情况？例如下面的代码：
1 2 3 4 5 6 7 8 9 10 11 12 func g(n int) { println(n) } func h(str string) { println(str) } func f() { defer g(0) defer h(&amp;#34;h&amp;#34;) } 调用 f 输出为：</description></item><item><title>Useful Commands</title><link>https://blog.formalscience.com/2018/07/22/2018-07-22_commands/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/07/22/2018-07-22_commands/</guid><description>Convert images to a video 1 ffmpeg -r 30 -start_number 3455 -i _IMG%d.jpg -s 960X600 -pix_fmt yuv420p 30fps-960.mov -r 30: 30 frames per second -s 960X600: resolution -pix_fmt yuv420p: for OsX youtube-dl video and extract audio file youtube-dl --proxy socks5://127.0.0.1:1080 -x --audio-format mp3 youtube-url
virtualenvwrapper WORKON_HOME: which directory your environments are created in /usr/local/bin/virtualenvwrapper.sh: default location for its configuration file mkvirtualenv test --python=python3: make a virtual environment &amp;rsquo;test&amp;rsquo; with python3 rmvirtualenv test: remove a virtual environment &amp;rsquo;test' workon test3 or lsvirtualenv -b test3: activate a virtual environment &amp;rsquo;test' deactivate: exit current environment more details: search engine how to avoid globa packages how to copy an environment node &amp;amp;&amp;amp; npm npm complains: Error: Cannot find module 'process-nextick-args'</description></item><item><title>电池人生</title><link>https://blog.formalscience.com/2018/07/06/2018-07-06-battery-life/</link><pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/07/06/2018-07-06-battery-life/</guid><description>电池，一般狭义上的定义是将本身储存的化学能转成电能的装置，广义的定义为将预先储存起的能量转化为可供外用电能的装置。因此，像太阳能电池只有转化而无储存功能的装置不算是电池。其他名称有电瓶、电芯，而中文池及瓶也有储存作用之意。
《维基百科》
5 月份上海校友会来杭州参观，我带队去云栖景区玩，后来大家一起去了阿里西溪园区。园区很漂亮，中间有一块地被高墙围起，据说马云在那里开董事会。后面有个讨论环节，那时我已经昏昏欲睡了，只记得那个阿里 P11 说今后公司要拓展的方向是娱乐和健康。
娱乐和健康都是人生活的必需品。
最近认识一些朋友去今日头条工作了。这个公司的应用通过算法构建消息流推送到人们的移动终端。在信息泛滥的今天，可以永远向下滑动手指，看到无尽的“新”闻。可算法知道，这些新闻的类型是你喜欢的，同样的主题是你的老朋友了。
当然这样的应用通常不需要你付费，因为你就是它们的商品。一次次的滑动中除了那些通过视网膜输入的新闻还有各式各样的广告，都是基于你的“兴趣”进行筛选后的结果。它们攫取你的时间卖给了肯花钱展示商品的人，赚到了差价。
以前看黑客帝国的时候，总是不明白 Matrix 那么发达，却还是需要将人关在营养仓里当做电池使用。人是消耗能量的啊！最近才逐渐有所领悟，人体不一定可以拿来产生能量。人作为进化的产物，智能依赖生物结构，Matrix 可以将一个个的人作为基础的计算组件，用来支撑虚拟世界中的各种计算。现在我们使用人工智能也是如此，用来识别人脸、用来预测天气 ……
《海伯利安》中有一个设定，机器智能帮助人类构建了可以在宇宙各处穿梭的跃迁节点，而这种技术远远超出了人类的理解范围。人们以为这是机器智能回馈给它们的“造物主”的礼物，但实际上这是一个陷阱。人穿梭过跃迁节点从另一侧出来并不是瞬间完成的。在节点中度过的无法感知到的时间中，人的大脑的计算能力被机器智能利用，完成了自身的不断进化，来追求它们的终极目标。
在阿西莫夫的经典作品《我，机器人》改编的电影中，威尔•史密斯扮演的黑人警探戴尔•斯普纳不相信人类能和机器人和平共处，故事的各种冲突也从此展开。这部作品的底线是机器人还遵守“机器人三定律”，虽然是被以某种人类意想不到的方式施行的。现实中，我们能对机器人有所期待吗？我们能对创造机器人的人有所期待吗？
总是有人对新的技术保持怀疑 —— 有些人因为未知而恐惧，有些人因为远见而忧虑，只有中间的人享受着生活。
有时候想人的一生好短暂，也就一百年。昨天看到淡豹的一篇文章《近日新闻有感》，中间有一大段对日常种种琐事的描述，读的过程中仿佛头被浸在水中。究竟是什么（强大的）力量在驱使我们生活？
在我看来这种力量里又加入了一方势力，有些人在尽最大努力使用着智能算法来侵占人的生命。以前他们也这样做，通过编辑人们喜欢的花边新闻和轶事来吸引人们注意，不过那种方式毕竟低效。现在算法可以让人们通过滑动手指，自己戴上镣铐，出卖生命。
小的时候，有段时间我很喜欢四驱车，当然是在看了《四驱小子》之后。终于有了一辆（无影剑）后，我发现了一个现实的问题：这车跑起来很费电池，于是又攒钱买充电电池。最终电池的能量变成了车在赛道上前进的动力以及我的回忆。
我对四驱车的欲望肯定是来自动画片，后来我弟弟那时候买的就是悠悠球了。人的大脑是可以被外界信息影响的，现代科技也会以某种方式对人的大脑进行编程。现在人脑运行的机制还不清楚，如果可行的话，那些广告商肯定想通过某种方式对你的大脑进行编程，让你看一遍广告就下单购物。
我前段时间在想：如果总是接受这样被算法（你的手指）选择过的信息，会变傻吗？至少我体会过那种无效信息过载的时刻，就是大脑没什么感觉了。
在这个过程中我们到底付出了什么呢？我们的时间，我们的未来。
随着时间的推移，人的未来就逐渐坍缩，直到生命终点，也就没有未来了。每一秒过去，我们的未来就少了几分可能性。
如果明天不值得期待，就继续燃烧自己吧。</description></item><item><title>Upgrade DigitalOcean's Ubuntu 17.04 to LTS version in 2018-06</title><link>https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/</guid><description>What happened? I found my proxy for accessing some websites stopped working today, so I had to change my VPS&amp;rsquo;s IP address. After some trials, everything seemed OK and I started watching a skiing video made by NorthFace on Youtube.
Emmmm, I noticed 12 packages needed to be updated. Well, I typed sudo apt-get update and got messages like this (I didn&amp;rsquo;t save the error messages then):
404 Not Found [IP: 91.</description></item><item><title>2016 十一塞罕坝行动</title><link>https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/</link><pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/</guid><description>这是很久之前应该出现的一篇日志，当时忙于处理照片、毕业论文之类的事情，加上强烈的懈怠情绪，一直没写。
2016 年暑假过后开学不久，政委喊大家出去骑车，这注定会很有趣。目的地是承德的塞罕坝，不是张家口的坝上草原。 主题是骑行、赏秋景。大家确认好时间后，大家定了火车票，提前去西直门北京北站托运了自行车。剩下的就是等待出行了。
塞罕坝国家森林公园位于承德北部，毗邻内蒙古（上面），是清代皇家猎苑一部分，集满蒙汉三民族文化。 景区内有七星湖、太阳湖、泰丰湖、白桦林、月亮湖等较大的景点和多个小景点，自然风光和人文遗迹于一体。 （注：这些湖我们一个也没去，人文遗迹也没看到） 另外，还珠格格就是在这个地方被他皇阿玛一箭射中的。
整体路线规划为：
北京北 - 四合永镇 （火车） 四合永镇 - 围场县 （骑车、住宿） 围场县 - 机械林场 （骑车、住宿） 机械林场 - 半截塔镇 （骑车、住宿） 半截塔镇 - 隆化县 （骑车） 隆化县 - 北京北 （火车） Day 0 火车上的旅行总是欢快的，小帅哥 YL 拿了很多桌游，大家玩啊玩。 在玩阿瓦隆的时候，某个女博士一脸愁容，明显就是脑细胞不够用的表现。 路上路过了很多听过但是没去过的地方，比如古北口。
到了四合永镇，取车合影。
到围场县很近，我们很快就骑到了，安顿好了住宿。肚子饿的呱呱叫，出去觅食，集体决定吃火锅（作为吃饭不挑剔的我当然也给不出什么建设性意见）。 一行人吃得热火朝天，风生水起，生龙活虎。最后算账，人均三十。
然后去附近的超市准备接下来几天的食粮。水果、面包、零食、饮料，各种东西都来点。 逛超市比较有意思的是看到各种东西分门别类堆在一起，那么多，又都很光鲜。虽然不能都买了，但总有种莫名的愉悦感。
晚上还是玩玩玩，时刻压制住情绪，以免吵到其他人。
Day 1 第二天按时起床，旁边小店吃了早饭，准备出发。 说到这个出发，还是有些字面意义上的周折。小城在修路，大家凭着感觉和导航终于骑了出去。
骑车嘛，还是为了拍照。一路上大家各种互拍、自拍，对着天空、河流、群山拍。
骑车嘛，总会爆胎，尤其是漂亮的那种车，比如鲜红的挑战者 300。一路上补过胎的，没经验的，也基本都学会了。
这样的景色大家拍来拍去，怎么也拍不厌。骑在这样的路上，也感觉不累（假的，毕竟在爬大坡）。
接近傍晚，天空的颜色变得多彩，而眼前原野的景色淡下去了。
剩下的就是赶路了，还要走一段公路到机械林场。虽然路上的景色也很美，但是看不到，只能通过黑黢黢的树影摇曳想象了。路上发生了一起意外，美女 GY 摔车了。 简单处理了一下，也只能继续骑车。到了机械林场后买了创可贴和碘酒暂时顶一下。
晚上十点多大家吃了羊腿饭，景区物价高，不过仍不及五道口。住宿的话，还停暖和的，三个大男生挤一挤了，另外的妹子们怎么睡都随意了，虽然大家都是在一间屋子里吧。
Day 2 第二天早上在店家吃了早餐，馒头、稀饭、饼、鸡蛋、炒小菜，典型的住店组合套餐（甚至在西藏也是这种组合……）。 出去后，开始下小雪，然后是小雨。大家都披上了雨衣。不过这注定是狼狈的、凄惨的、励志的一天 …… 我不说别人了，就说我自己吧。首先我的鞋子是登山鞋，防水的那种，可以避免水从外面进来，也可以防止水从里面出去。于是我就相当于穿着一个便携泡脚盆在骑车。 总之就是一种说不清道不明的酸楚与傻乐呵在心中交织。
最大的收获是，雨中的山林颜色更加润了。眼前的雨虽然冷，但是远处的雾气很没啊，我们是不畏风雨的骑车人。
遇到一个便利店，大家进去买了各种包裹隔离物品（塑料袋），试图把自己的脚和腿保护起来。 中午在一个小饭馆吃了面，面对有点凶狠的狗去上了厕所。 吃完饭接着骑车，然后大家的车纷纷爆了胎，前面爆完后面爆胎。 忘记提的一点是，我带的补胎片失效了。 而备胎也用光了，于是各种打气筒接力打气艰难前行。 直到政委看到了一个给汽车补胎的地方，我们借用先进装备磨胎，强力胶水补胎，颇有种鸟枪换炮的感觉。</description></item><item><title>理解 C++ Traits</title><link>https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/</link><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/</guid><description>C++ 是我学习的第一种编程语言，当时是 2007 年。现在 C++ 标准委员会已经在讨论 2020 年要发布的特性了，我连 2011 年发布的 Traits 都还不知道是啥。今天下定决心了解总结一下。
C++ 之父 Bjarne Stroustrup 说：
Think of a trait as a small object whose main purpose is to carry information used by another object or algorithm to determine “policy” or “implementation details”.
嗯，这段描述也比较抽象。我的理解是，trait 把不同类型的特定信息进行打包，用在算法或者其他对象中。这样算法或者其他对象的设计可以做到更加通用，通过 trait 打包的信息进行策略选择或者实现细节。
这段代码判断两个类型的关系。第 4 行的模板以两个类型作为参数，通过结构体 type_relation 的成员 relation 获取比较结果。当前代码输出：
type_relation&amp;lt;bool, int&amp;gt;: different type_relation&amp;lt;int, int&amp;gt;: different 这段代码并未实现预期功能，因为比较 bool 和 int，以及 int 和 int 时，都输出 &amp;quot;different&amp;quot; 。下面继续完善这个 trait 实现。</description></item><item><title>‘How Does Monero Work?' 笔记</title><link>https://blog.formalscience.com/2018/01/21/2018-01-21_how-does-monero-work-%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/21/2018-01-21_how-does-monero-work-%E7%AC%94%E8%AE%B0/</guid><description>Monero 门罗币的一个介绍视频
我刚买到 1070Ti 显卡时曾经想要挖过这个币，后来放弃了，觉得没有意义。不过了解这个技术的一些原理还是有价值的。
Siraj Raval 的免责声明： 
Monero 是一种不可追踪的加密货币，网络上很多非法买卖东西的人会使用它。他介绍这个技术的原因是：你应当对你的数据有控制权，而很多数据是交易数据（transactional data）。目前很多公司可以从中免费挖掘信息，用来预测你的购买行为，以便向你展示广告。理想情况下他们应当为你的数据付费，而他们付费的唯一可能是你控制着数据，而唯一控制数据的方式为数据是匿名的。为了查阅你的交易历史，</description></item><item><title>两个玻璃球（网上流传的面试题）</title><link>https://blog.formalscience.com/2018/01/17/2018-01-17_%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/17/2018-01-17_%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>据说这是 Google 的一个面试题：
有一栋 100 层高的大楼，有两个完全相同的玻璃球。假设从某一层开始丢下玻璃球会摔碎，利用手中的两个玻璃球确定是第几层。最少扔几次玻璃球可以确定这个临界楼层（玻璃球在这一层以及更高的楼层扔下会摔碎）？
就如孔子说过的那句名言 &amp;ldquo;I Never Said All That Shit&amp;rdquo; 一样，这个题目出自哪里我也没有去考证。下面把我的思路整理一下。
如果只有一个玻璃球，能做的就是从 1 层开始尝试扔下玻璃球，然后尝试 2 层、3 层 ……，直到某一层扔下玻璃球后摔碎。而现在有两个玻璃球，我们可以用一个玻璃球从 1 层、11 层、21 层 …… 扔下去，确定一个较小的破碎范围，然后使用第二个玻璃球确定具体的楼层。
假如总共 N 层，我们从第 X 层扔下第一个玻璃球，有两种可能性：玻璃球摔碎或者没碎。如果玻璃球摔碎，说明临界楼层在 1~X 中；如果没摔碎，则临界楼层在 X+1~N 中。
如果临界楼层在 1~N 中是均匀分布的，那么 $N &amp;gt; 2$ 时确定临界楼层需要扔玻璃球的最少次数可以由以下公式表示：
$$ f(N)= \min_{X \in [1, N]} {1 + f(N-X)\frac{N-X}{N} + g(X)\frac{X}{N}} $$
$f(N)$ 为使用两个玻璃球确定区间长度为 N 时的临界楼层所用次数，$g(X)$ 为使用一个玻璃球确定区间长度为 N 时的临界楼层所用次数。这个公式的三部分分别对应：
一次扔玻璃球的尝试 玻璃球未摔碎概率$\times$此时继续尝试需要的次数 $f(N-X)$（两个玻璃球） 玻璃球摔碎概率$\times$此时继续尝试需要的次数 $g(X)$（一个玻璃球）。 显然有 $f(1)=0$，$g(N)=N-1$。可以用动态规划求解 $N=100$ 时需要的最少次数。</description></item><item><title>Golang 系统调用/Syscall</title><link>https://blog.formalscience.com/2018/01/15/2018-01-15_golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/15/2018-01-15_golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/</guid><description>概述 很多和系统相关的函数都需要调用系统 API，例如读写文件的函数。Golang 对一些系统调用接口进行了封装，提供了 Golang 函数让用户调用，例如：
1 2 func Read(fd int, p []byte) (n int, err error) func Write(fd int, p []byte) (n int, err error) 同时，Golang 也提供了对 Syscall 的直接调用支持：
1 2 3 4 5 func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) RawSyscall 和 RawSyscall6 是对操作系统 Syscall 的直接调用；Syscall 和 Syscall6 会在调用操作系统 Syscall 前调用 runtime·entersyscall ，在操作系统 Syscall 返回后调用 runtime·exitsyscall 。</description></item><item><title>Golang 中学到的新东西</title><link>https://blog.formalscience.com/2018/01/14/2018-01-14_golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/</link><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/14/2018-01-14_golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/</guid><description>数据类型 string 类型 string 类型使用 2 个 word（64 bit 系统为 8 byte * 2）表示：一个 word 是指针，指向字符串存储区域；一个 word 表示长度数据。
slice $\leftrightarrow$ unsafe.Pointer 1 2 s := make([]byte, 200) ptr := unsafe.Pointer(&amp;amp;s[0]) 1 2 var ptr unsafe.Pointer s := ((*[1&amp;lt;&amp;lt;10]byte)(ptr))[:200] or
1 2 3 4 5 6 7 8 var ptr unsafe.Pointer var s1 = struct { addr uintptr len int cap int }{ptr, length, length} s := *(*[]byte)(unsafe.Pointer(&amp;amp;s1)) or
1 2 3 4 5 var o []byte sliceHeader := (*reflect.</description></item><item><title>使用 Nvidia 显卡加速机器学习算法的一些资料</title><link>https://blog.formalscience.com/2018/01/13/2018-01-13_%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/13/2018-01-13_%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/</guid><description>Nnidia 显卡可以用来加速机器学习算法（特别是深度学习），但安装驱动过程中总会碰到这样或者那样的问题。 一个难点是安装库的时候没有下载链接，比如 Nvidia 的 Cuda/cuDNN 主页经常会出现这样的提示：
NVIDIA Developer Site is under going maintenance. The site will be back by shortly. We apologize for any inconvenience. 虽然不能按照官方路径进行下载，但经过搜索总能找到一些入口。下面是我收集的一些链接：
cuDNN 下载页面：https://developer.nvidia.com/rdp/cudnn-download 这个页面需要注册 Nvidia 开发者账号并登录，当前包含从 cuDNN v5.1 到 cuDNN 7.0.5 的版本 CUDA 下载页面：https://developer.nvidia.com/cuda-toolkit-archive 这个页面需要注册 Nvidia 开发者账号并登录，当前包含从 CUDA Toolkit 1.0 到 CUDA Toolkit 9.0 的版本，最新的 CUDA Toolkit 9.1 的链接仍然指向正在维护的提示页面 Ubuntu 16.04 CUDA Toolkit 9.1 下载链接：http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb 此外可以在这个页面找到其他 Linux 发行版的安装包：http://developer.download.nvidia.com/compute/cuda/repos/ Windows 10 版本的 CUDA Toolkit 9.1 我成功下载过一次，但是和当前的 TensorFlow 1.</description></item><item><title>一些有趣的项目 Protocol Labs</title><link>https://blog.formalscience.com/2018/01/12/2018-01-12_%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/</link><pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/12/2018-01-12_%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/</guid><description>最初在 3Blue1Brown 发布的一个介绍区块链原理的视频中看到了这个组织的连接。发现比较有意思，给大家分享一下~
项目的使命：
We believe the internet has become humanity&amp;rsquo;s most important technology. We build protocols, systems, and tools to improve how it works. Today, we are focused on how we store, locate, and move information.
我们相信互联网已成为人类最重要的技术。我们构建提升互联网工作能力的协议、系统和工具。当前我们集中在如何存储、定位和移动信息的工作上。
这段文字翻译得有点机器翻译风格。
项目地址：https://protocol.ai/projects/ ，目前上面有 5 个项目：
Filecoin 加密货币，Miners 通过向网络提供存储空间来获取 Filecoin ，使用者通过消耗 Filecoin 来在去中心化的网络中存储加密后的文件。 IPFS (InterPlanetary File System) 一种新型协议，用来使网络去中心化。IPFS 通过内容寻址和数字签名来创建完全去中心化和分布式的应用。IPFS 使得网络更快、更安全以及更加开放。 这是一段 YouTube 上的介绍视频：https://www.youtube.com/watch?v=8CMxDNuuAiQ ，介绍了 IPFS 的一些基本使用方法。根据我的理解，这是通过 content-address（immutable hash） 访问的分布式加密文件系统，可以通过命令行、网页界面等多种方式进行访问，有点类似 Samba，不过是分布式的。Siraj Raval 制作的一个视频：https://www.youtube.com/watch?v=BA2rHlbB5i0 ，也对 IPFS 进行了介绍，主要对 Why 的部分进行阐述。 带宽，多个客户端对中心节点访问 延迟 弹性 Resiliency，中心节点失效（网络断开或者数据删除）后无法进行数据访问 中心化 Centralization，主流网站掌控所有数据，用户无从得知数据的使用方式，此外会受到政府或者其他势力的干扰。 使用的技术：Chord、DHT、bit swap(bittorrent mechanism)、MerkleDAG Libp2p 一个模块化的网络栈，把一系列传输协议和 peer-to-peer 协议整合在一起，方便开发者构建大型、健壮的 p2p 网络 IPLD 去中心化网络（content-addressable web）的数据模型，它通过加密哈希值的方式连接了所有数据，使得数据的遍历和彼此链接更加容易。网站的示意图中连接了 bitcoin、以太坊、IPFS、Git Repo 等。 Multiformats 这个项目是面向未来验证系统（future-proof systems）的协议集合， 自描述的格式可以让你的系统可以互操作和具有可升级性。</description></item><item><title>Bar</title><link>https://blog.formalscience.com/2017/11/11/2017-11-11-bar/</link><pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/11/11/2017-11-11-bar/</guid><description>1 2 3 4 5 import &amp;#34;blog.formalscience.com/nothing&amp;#34; func main() { nothing.bar() } I dreamed about death this morning.
I dreamed about false dreams this morning.
I woke up tired.
I made some coffee with milk or without milk.
I saw some videos on Youtube and Bilibili.
I wrote this blog.</description></item><item><title>我一生的故事</title><link>https://blog.formalscience.com/2017/01/24/2017-01-24_%E6%88%91%E4%B8%80%E7%94%9F%E7%9A%84%E6%95%85%E4%BA%8B/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/01/24/2017-01-24_%E6%88%91%E4%B8%80%E7%94%9F%E7%9A%84%E6%95%85%E4%BA%8B/</guid><description>我一生的故事 我终于去看了《降临》。最初知道 特德·姜／Ted Chiang 的《你一生的故事 ／Story of Your Life》要被搬上银幕的时候，我内心很激动，因为这是我非常喜欢的一篇科幻小说。不过担忧也是有的，很多科幻小说以电影的形式展现时，感觉上总是有些残缺，或囿于电影技术，或囿于艺术表现形式，或者就是书的读者有不切实际的期望。
再次听说相关消息时，已经是在美国上映的消息了，影片名称是《降临》，相比原书的标题这个名称显得更加科幻一些。然后听说到的就是各种好评，我本来期待着北邮人上什么时候会有下载资源，因为感觉国内没可能上映了。后来知道的就是上映的消息，直到今天观影结束。
我相信关注一些电影公众号的人肯定已经被剧透了，在此我就不再描述剧情了。对于我来说，看过中文版的小说，又看了英文版的小说，然后看了电影。在已经知道了剧情的前提下看电影，和已经知道了未来的人生的前提下继续生活有些相似之处。不过我头脑仍然只能处理从过去向未来流动的线形时间，而不是书中／电影中的 没有方向的文字。
语言真的可以影响人的思考方式吗？
作为《你一生的故事》理论基石的是语言相对性原理（萨丕尔-沃夫假说）。这是一个关于人类语言的假说：
认为不同语言裡所包含的文化概念和分类会影响语言使用者对于现实世界的认知，也就是说不同的语言的使用者会因语言差异而产生思考方式，行为方式的不同。
七肢桶（书中外星人因其外形得到的称呼）的文字是非线形的文字，复杂的文字在简单的文字之上通过改变结构得到，它们在表达一个思想之前就获得了这个思想对应文字的全部形状。同样对于它们来说，复杂的物理学定律，特别是人类目前没有掌握的关于时间空间的部分，比基础的牛顿定律来说更容易理解。光为什么沿着时间最短路径行进？我们可能需要量子理论来计算光行进所有可能路径然后对每一条路径进行积分算出其概率。对于七肢桶来说，光沿着最短路径行进就是其目的。
每个文明的科技进展路线和其环境有很大关系，一个内陆国家是发展出强大航海科技的可能性是很小的。对于七肢桶来说谈论过去和未来是没有意义的，它们只是向着目的前进。（即使这个“目的”在“未来”发生）也许这是看待世界的两种方式，就像在在时域和频域对一个信号进行不同的观察。
女主角在和七肢桶接触以及学习了其文字 —— “七文” 后，逐渐领悟了自己的未来。电影或书中出现未来的地方就容易出现矛盾。特别集中在人知道了未来之后能否改变未来这一问题上。有一种观点认为预知未来和自由意志之间只能二择其一。女主角在学习文字语言的过程中，到底是获取了预知未来的能力，还是放弃了自由意志？
预知未来的人不会奢谈未来，读过岁月之书的人不会承认自己读过它。 —— 《你一生的故事 ／Story of Your Life》 特德·姜／Ted Chiang
人们讴歌自由意志，然而又同时梦想可以预知未来。 —— 《我一生的故事》 乱说话的跳跳 ／ Bef0rewind
女主角在知道自己女儿将来会因为罕见病去世之后，依然（此处用选择或者决定都不合适）生下了她。后来她把自己对未来的预知告诉丈夫后，丈夫对她的行为感到愤怒，他们的婚姻也结束了。
对于电影中出现的一个小高潮，商将军告诉女主角自己的私人号码。有人质疑，女主角既然能够看见未来，为什么需要在未来的商将军告诉她这一信息。也许语言对她的影响是逐步产生的，未来的画面满满展开在了她面前，而在此刻她注定不知道这一信息。未来的商将军也受到了 “七文” 的影响，对女主角说：你应该（should）给我打电话。
书中最后没有提到七肢桶来到地球的目的，电影中给出了一个目的：三千年后七肢桶需要人类的帮助（它们在未来里看不到自己的目的了吗？）。电影中女主角对七肢桶的文字出版了教科书，讲授相关知识，也许会对地球人的思维产生影响吧。我也想过，七文会主导世界吗，地球人也会出现某种进化吧。好多语言会消失啊，对应的文明也消失了吧。
我讲过的两段话：
时间旅行故事中最美妙的因素就是时间。我在过去种下一颗种子，现在收获了一棵大树。
一个能够沿着时间轴前进后退的生命和一个只能单向前进的生命，哪个更有趣？前者已知所有，后者并不知道未来。如果前者眼中时间是一条线段（端点可能在无穷处），线段两端是其诞生和终结，可能还是对前面是否有尽头的未知有意思一点。
在英剧《奇异博士》五十周年特别篇 The Day Of The Doctor 中，三代博士使用的是同一个计算终端。当最老的博士在他的终端启动了计算，到了第三代博士手中的终端就处于计算了几百年之后的状态，得到了计算结果。
时间，只有时间。
我如果在书中，会是一个什么角色呢？我会有什么样的行为？作为一个希望与外星智慧生命接触的人，如果真有外星飞船降临，我得不到与它们见面的机会，毕竟我不是有特殊技能的人士。除非我是男主角，那外星生命可能出于某种目的同我接触。
有一点特别感动，父母会走到生命的尽头，孩子也会。我想到自己未来的孩子，我与你的故事，我会成为一个怎样的父亲，也许很久之前我就知道了呀。
一些相关的科幻小说
《与拉玛相会／Rendezvous with Rama》 阿瑟·克拉克／Arthur C. Clarke
一艘外星飞船从地球附近飞过，人类登陆上去后除了发现了高级自动机器人外，对于是否有智慧生命控制飞船以及其目的仍旧一无所知。最后随着飞船离地球远去，留给人类的只是一个谜。人是多么渴望自己有邻居，然而这个邻居确毫无回应地走了。
《海伯利安／Hyperion》丹·西蒙斯／Dan Simmons
这是一个背景宏大的故事，我们未来是否能够与人类的创造物（AI）和平共处？爆发战争的话，双方都要穿越时空传送回战力进行决斗。如果有更高级的生命，人类被其接纳的条件是什么？需要超越肉体形态，或者和 AI 进行合体产生新的生命吗？是否要保持人类的纯粹，还是对自身进行改造，适应地球之外的环境，在未来更广阔的世界中进化？
《永恒的终结／The End of Eternity》艾萨克·阿西莫夫 ／Isaac Asimov</description></item><item><title>Ingress_Passcode_自动提交</title><link>https://blog.formalscience.com/2017/01/18/2017-01-18_ingress-passcode-%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4/</link><pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/01/18/2017-01-18_ingress-passcode-%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4/</guid><description>什么是 Passcode？ 根据 Ingress 中文游戏指南 的讲解，Passcode 是 Ingress 提供的一种奖励。
使用 Investigation Board 来了解 Ingress 的最新剧情并寻求对 Niantic Project, NIA, XM, Shapers 以及各阵营不同问题的答案。 可以使用隐藏在这些报告之中的 Passcode 来兑换道具（Resonator，XMP 等），XM 或者 AP。
另外，一些官方活动会向到场者赠送包含 Passcode 的卡片，特定的官方周边也会赠送此类卡片。卡片上的 Passcode 一般能够兑换活动徽章。
注：在很多社交网站上可以找到有效的 Passcode
在 iOS 平台的 Ingress 客户端上 Passcode 兑换功能不可用，因此只能使用 Intel Map 来兑换。
在 Intel Map 上兑换 在右上方点击 Passcode 输入你的 passcode，然后点击 SUBMIT 兑换 自动化 Intel Map 兑换过程 可以通过浏览器的调试页面，自动将搜寻到的 passcode 提交，进行物品兑换。
表单提交 1 document.getElementById(&amp;#34;redeem_reward_form&amp;#34;).submit(); 不能正确提交表单失败的原因是这个表单的 input 元素名称就是 submit，需要重命名。
1 2 3 4 5 var field = document.</description></item><item><title>如何构建一个 Java Agent</title><link>https://blog.formalscience.com/2017/01/16/2017-01-16_%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA_java_agent/</link><pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/01/16/2017-01-16_%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA_java_agent/</guid><description>First. Implement a static premain (as an analogy to main) method, like this:
1 2 3 4 5 6 7 import java.lang.instrument.Instrumentation; class Example { public static void premain(String args, Instrumentation inst) { ... } } Second. Create a manifest file (say, manifest.txt) marking this class for pre-main execution. Its contents are:
Premain-Class: Example
Third. Compile the class and package this class into a JAR archive:
javac Example.java jar cmf manifest.</description></item><item><title>相思 - 头被按入水里</title><link>https://blog.formalscience.com/2017/01/10/2017-01-10_%E7%9B%B8%E6%80%9D_-_%E5%A4%B4%E8%A2%AB%E6%8C%89%E5%85%A5%E6%B0%B4%E9%87%8C/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/01/10/2017-01-10_%E7%9B%B8%E6%80%9D_-_%E5%A4%B4%E8%A2%AB%E6%8C%89%E5%85%A5%E6%B0%B4%E9%87%8C/</guid><description>佛教公案：“师父将弟子头按入水中良久，泛沫渐少；师父将弟子拽起，复其元气，曰：汝求真谛如空气时，便知何为真谛矣。”
不见对方，就像我的头被按入水里一样滋味；我快要溺死了，呼吸不济了，经过这种窒息，我才重新认识我要寻求的“真谛”并练就了爱情中必不可缺的执着。
《恋人絮语·相思》
​ 相思是纯粹的痛苦，一个人在一个人不在，对方并不知晓留下人的感受，守望之人陷入煎熬不能自已。
这是一场不知道何时终止的对抗，与时间同命运的战争，游戏已经开始。
我尝试我嘲笑过的行为
一只，两只，三只
绵羊都是乖乖的吗？
就如你摇头晃脑的样子
//
夜晚并不宁静
至少在我的城市里不是
晚上的月光可真耀眼
我没有想到地上的霜
我的相思要温暖一点点
//
或早或晚
不知何时
我捡回了我的睡眠
//
或早或晚
不知何时
我想我永远失去了你</description></item><item><title>Windows 推荐软件</title><link>https://blog.formalscience.com/2016/09/16/2016-09-16_windows_%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6/</link><pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/09/16/2016-09-16_windows_%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6/</guid><description>在知乎上看了一些推荐
Total Commander Listary AutoHotKey Internet Download Manager paint.net pot player Tickeys 7-zip Beyond Compare PowerTab (Powershell auto complete) Fiddler ZoomIt Postman - Chrome 里的 HTTP/REST 客户端，Web 服务专用神器 Pixie - 简单，可爱，便携的取色器 快捷键
Windows+Tab调出虚拟桌面 Alt+Tab 切换不同的窗口 Windows+Ctrl+D 创建新的虚拟桌面 Windows+Ｃtrl+F4 关闭当前虚拟桌面 Ctrl＋Windows＋左右箭头　虚拟桌面切换</description></item><item><title>欲辩已忘言</title><link>https://blog.formalscience.com/2016/08/25/2016-08-25_%E6%AC%B2%E8%BE%A9%E5%B7%B2%E5%BF%98%E8%A8%80/</link><pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/08/25/2016-08-25_%E6%AC%B2%E8%BE%A9%E5%B7%B2%E5%BF%98%E8%A8%80/</guid><description>前段时间，收获了两篇论文的接收通知。
目前正在学习 Verilog 语言，应对老板提出的 FPGA 项目减少功耗 10% 的任务。据说这是毕业前提之一，我暂且先接下来，学习一门新的语言还是比较有趣的，而且复习一下 FPGA 相关的开发还是有意思的。未来硬件会有更大的发挥空间，软件硬件化和硬件软件化应该是两个趋势。不过可能未来的 FPGA 硬件应该使用更抽象的语言来开发的。
最近开始面试工作了
网易在线机试后要去杭州面试，放弃了，而且听说只报销 600￥ 路费，就不去凑 G20 的热闹了 微软亚研，报的研发岗位，在线机试后，由于水平太差被刷，不能去提前招人的夏令营 Google 的机试轮现在我自己的算法水平通过不了 华为的话，我去 FIT 签出国开会的请假条时，听胡杰说了给的钱不少，而且有很多方向可以选，于是联系了四个部门，都在接触中 整体而言，华为的面试倾向于沟通彼此研究开发的背景。面试官会问一些读博期间的研究方向和参与的项目，也会介绍公司的一些研究开发方向和项目应用场景。整体而言不像互联网公司涉及太多算法题目和语言细节（这一点我是听闻的，毕竟我只在六年前电面过一次腾讯）。几个方向都有匹配的地方，我觉得都可以去做一些事情。不过对于华为在工作环境和氛围方面的口碑，评价分化很严重。不过我搜索了一下知乎上相关的问题和华为的内部论坛“心声”。发现评价并没有分化太严重。
累是大家一致认同的。部门合作不畅，企业加班严重，考评不合理，PPT 和会议都很多等问题都是员工身心劳累。分歧在于，是否觉得这样的付出是否有价值吧。有些人认为提供了还不错的收入，让穷苦的人能够有所收获；有些人认为，为了这点钱牺牲掉自己的生活并不值得。另外有些人认为自己成长很快；有些人认为里面更多的是学习华为的业务，其中使用的很多技术是极其落后的。此外不同部门之间的评价也是有很多差别。
这些都在预期范围内。不过具体到部门的工作环境还是要具体沟通一下。对于钱，希望多一些；对于工作内容，希望有挑战性有趣一些；对于工作氛围，希望（在可能情况下），高效一些。不过降低预期是幸福之源，也要有心理准备。我懒得很，估计也不符合人家对“奋斗者”的期望，如果要去的话可能只是为了钱和钱。
华为在松山湖搞的仿 Google 的欧洲小镇风园区效果图还不错，而且也许我可以去松山湖划皮划艇。这样光想着玩可不好。
其他的工作慢慢搞吧，还有其他计划，比如去读个博后，继续思考下人生什么的。别人问题你未来有什么规划呢？对不同的人有不同的回答。在老家，就说找个赚钱多的工作；对一些人说想去公司看看；对一些人说希望可以出国工作。这么多的回答可能是我内心矛盾和虚伪的体现吧。目前的主要问题其实是对找工作没有激情。
有些人还是听我提过有种我向往的生活的，不过目前来看很遥远。在其境，谋其事吧。
题目要继续刷，就算暂时去不了相关公司，也算培养一个乐趣吧。
注：现在微软默认的输入法真是差劲，“机试”这个词我已经用输入法手工合成了多遍，仍然不能在输入全拼时前排显示，每个字都要翻好几页才能选中；“通过不了”中的“了”在非常后面的选字页。</description></item><item><title>对江苏高考减少招生名额的一点看法</title><link>https://blog.formalscience.com/2016/05/17/2016-05-17_%E5%AF%B9%E6%B1%9F%E8%8B%8F%E9%AB%98%E8%80%83%E5%87%8F%E5%B0%91%E6%8B%9B%E7%94%9F%E5%90%8D%E9%A2%9D%E7%9A%84%E4%B8%80%E7%82%B9%E7%9C%8B%E6%B3%95/</link><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/05/17/2016-05-17_%E5%AF%B9%E6%B1%9F%E8%8B%8F%E9%AB%98%E8%80%83%E5%87%8F%E5%B0%91%E6%8B%9B%E7%94%9F%E5%90%8D%E9%A2%9D%E7%9A%84%E4%B8%80%E7%82%B9%E7%9C%8B%E6%B3%95/</guid><description>关注了一下高考名额调配事件。分别看了一本录取率、985/211 录取率、本科录取率等统计数据和一些解读。
** 一本线 **
网上有一张各省一本录取率的图，其中几乎所有帖子都把山东拿出来吊打一番。你看，这厮还老说高考难，看那一本上线率！
山东一本录取率排全国第五，还是有点反直觉的。看解读的过程知道了一本线是各省自己定的，不同省份对一本线覆盖学校的定义也不一样。以前我以为山东只有两所一本…… 后来发现有许多学校竟然也是或者近些年进入了一本线。包括老家的德州大学都想改名“鲁北大学进入一本。我也是很无语。
说实话，把江苏的录取计划和山东对调一下，估计山东考生还是很开心的…… 我觉得这是山东考生被虐惯了，有些受虐综合症了。隔壁两个省的德性也都差不多，也许是因为本省没什么民营经济，都是官僚治下的国有大企业吧，人民没有发声的底气。
** 抗议 **
被施舍的心态
无论如何，家长的愤怒并不一定完全是针对这次事件，也是对某些特权省份的控诉。这种控诉，敝省人民最擅长了，不过也招致了高分低能的评价。而江苏的口碑明显好很多，卷子确实难啊。
而且教育相关部门发布政策的方式也不好，不过我也怀疑沟通的可能性。毕竟很容易进入“我不听，就是你冷酷无情”的情形。
前两年山东高考要把体育成绩也算到高考里，学生都开始练了，后来管教育的副省长被纪委搞进去了，也就没后文了。
我觉得就算抗议的人，也会有一部人觉得教育资源是“青天老爷”们施舍过来的。因此就请求老爷们公正一点。不过把政府视为老爷，人家就会视你为屁民。
** 思考 **
这个世界肯定不是平的，充斥着各种阶级、财富差距、种族、地域的鸿沟。挺支持江苏家长抗议的，每个人都发出自己的声音，大家才可以协商，构建稳定的底线。不过中国现今这种制度下，恐怕没有抗议的空间。即便如此，有声音也是好的，而且也没有更好的办法了，权利不是可以通过和平手段取得的。第一次出手也许无效，可以为以后的行动积累经验。
其实知道事情真相如何与觉得事情应该如何是两件事。公平、正义、利益、权利，怎么理解和处理都依赖于一个个具体的人。即使自己很渣，我也总时刻提醒自己《了不起的盖茨比》开卷的话：“每当你想批评人的时候，要记得，世上不是所有人都像你一样拥有许多优势。”
一些事情，我觉得是正确的，其中有些也涉及到我自身，我“希望”别人也认同，然而社会中很多人恐怕不会认可。我也接受每个人的观点都有其局限性，我的肯定也是。我想，在不强迫不使用暴力的情况下进行说服，也是可以的吧。
自己以后也要加强数据收集、分析和解读的能力，形成客观的观点。</description></item><item><title>一点小的感悟</title><link>https://blog.formalscience.com/2016/05/15/2016-05-15_%E4%B8%80%E7%82%B9%E5%B0%8F%E7%9A%84%E6%84%9F%E6%82%9F/</link><pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/05/15/2016-05-15_%E4%B8%80%E7%82%B9%E5%B0%8F%E7%9A%84%E6%84%9F%E6%82%9F/</guid><description>前段时间碰到二老板，被“教育”了一番。让我放下自己的“爱好”（虽然她不知道我在干啥）；她在实验室总看不到我人（实际上没人能在实验室的楼上经常看到她，所以反向来看，这句话也不错，她谁也看不着）。
在 Quora 上看到一个问题：Do Ph.D students get time to pursue their hobbies? 里面有个回答的一句话：
&amp;ldquo;You make time for hobbies,&amp;rdquo; she told me. &amp;ldquo;This isn&amp;rsquo;t undergrad anymore. This is the rest of your life.&amp;rdquo;
诚然如此。我兴趣很多，也做过很多尝试，疆场半途而废，逐渐不再为自己的不能坚持而自责（对自己的愤怒不能解决什么问题）。
最近在参加协会的攀岩集训，体会到力量不够、体重过大、技术太烂的苦闷，不过依旧兴趣盎然。攀岩技术里注重平衡，要通过核心力量在岩壁上进行重心的转换，我做得不好。生活中把各种事情平衡也是挺难的一件事情，一是要学会一些技巧，另外也要有支撑这些技巧的力量。
同样的一条路，不同的人有不同的走法，生活不是比赛，可以看看风景。
配个图吧，我很喜欢的电影 《Meru》
电影海报
The North Face Meru Expedition, 2011
Exhausted, Renan Ozturk contemplates the long descent after making the summit. The top is only half way.</description></item><item><title>为什么 Haskell 中 函数类型 不是 “Show” 类型类的实例</title><link>https://blog.formalscience.com/2016/02/03/2016-02-03_%E4%B8%BA%E4%BB%80%E4%B9%88_haskell_%E4%B8%AD_%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B_%E4%B8%8D%E6%98%AF_show_%E7%B1%BB%E5%9E%8B%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/02/03/2016-02-03_%E4%B8%BA%E4%BB%80%E4%B9%88_haskell_%E4%B8%AD_%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B_%E4%B8%8D%E6%98%AF_show_%E7%B1%BB%E5%9E%8B%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B/</guid><description>问题 为什么函数类型不是 show 类型类的实例以显示参数和值的类型？
为什么我不能在 GHCi 或者 Hugs 中输入 \x -&amp;amp;gt; x + x ，在结果中看到同样的表达式形式作为输出。
为什么存在一个 Show 实例，却只打印函数的类型？
Prelude&amp;amp;gt; :m + Text.Show.Functions Prelude Text.Show.Functions&amp;amp;gt; show Char.ord &amp;quot;&amp;amp;lt;function&amp;amp;gt;&amp;quot; `&amp;lt;/pre&amp;gt; 如何让 lambdabot 有如下显示： &amp;lt;pre&amp;gt;`dons &amp;amp;gt; ord lambdabot&amp;amp;gt; &amp;amp;lt;Char -&amp;amp;gt; Int&amp;amp;gt; `&amp;lt;/pre&amp;gt; # 答案 ## 实践中的答案 Haskell 编译器并不保持表达式原本的形式，而是将它们转成机器代码或者其他的底层表示。 函数 `\x -&amp;amp;gt; x - x + x :: Int -&amp;amp;gt; Int` 也许被优化成 `\x -&amp;amp;gt; x :: Int -&amp;amp;gt; Int` 。没有那个地方l存储了变量名 `x` 。 你也许会想，Haskell 是一门脚本语言，在运行时环境中维护着表达式的内容。情况并非如此，[Lambda 表达式](https://wiki.</description></item><item><title>函数式语言课程期末考试判卷中遇到的一个问题</title><link>https://blog.formalscience.com/2016/02/03/2016-02-03_%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%88%A4%E5%8D%B7%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/02/03/2016-02-03_%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E8%AF%BE%E7%A8%8B%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%88%A4%E5%8D%B7%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</guid><description>在使用半自动化 Judge 系统对同学的答题进行评测的时候，遇到了一个奇怪的问题，总是会提示: Test_1: output.txt: openFile: resource busy (file is locked)
起初以为是 haskell 惰性求值导致的 IO 问题，因为搜索引擎也把猜测引导向这个原因，但是始终解决不了。
后来改变了思路，“现在看来好像是模块引入带来的 main 函数重名问题”，这是后面的猜疑。
继而发现将函数改名字也解决不了问题，实际也不是，就是 IO 的问题。因为如果先移除 output.txt， 那么使用 ghc 执行就不会出现之前的错误提示，不过在 ghci 中执行总是不会出错。
使用如下代码测试一下：
dir = &amp;quot;/home/user-name/Downloads/auto_check/work/2015final/ref/tests/words&amp;quot; main :: IO () main = do print &amp;quot;hehe&amp;quot; solution = runTest (map (\f -&amp;amp;gt; combine dir f) [&amp;quot;input1-1.txt&amp;quot;, &amp;quot;input1-2.txt&amp;quot;, &amp;quot;input1-3.txt&amp;quot;]) (combine dir &amp;quot;output1.txt&amp;quot;) `&amp;lt;/pre&amp;gt; 执行得到如下结果： &amp;lt;pre&amp;gt;`➜ test ghci Test_1.hs GHCi, version 7.8.4: http://www.haskell.org/ghc/ :? for help Loading package ghc-prim .</description></item><item><title>倚着石头晒太阳</title><link>https://blog.formalscience.com/2016/01/12/2016-01-12_%E5%80%9A%E7%9D%80%E7%9F%B3%E5%A4%B4%E6%99%92%E5%A4%AA%E9%98%B3/</link><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/01/12/2016-01-12_%E5%80%9A%E7%9D%80%E7%9F%B3%E5%A4%B4%E6%99%92%E5%A4%AA%E9%98%B3/</guid><description>我想倚着石头 晒晒太阳 山风吹着面庞 除了草木莎莎 没个其他声响 一会儿驱赶下飞虫 一会儿挠挠裤裆 就这么晕晕忽忽 睡他个一天半晌</description></item><item><title>關於 LLVM Pass 的一些基本操作</title><link>https://blog.formalscience.com/2016/01/09/2016-01-09_%E9%97%9C%E6%96%BC_llvm_pass_%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2016/01/09/2016-01-09_%E9%97%9C%E6%96%BC_llvm_pass_%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>關於 LLVM Pass 的一些基本操作 記錄一下關於 LLVM Pass 的一些操作，主要是一些配置工作。雖然目前的工作流程不是很優雅，但是可以自定義 LLVM Pass 的處理過程，通過進一步學習可以作出更有意思的東西。
本文的 GitHub 地址： https://github.com/ronhuafeng/HandleLLVMPassBasic ，有這篇文章和一些粗糙的源代碼。
網絡上已經有一下教程了，我也參考了這些教程。
使用 clang 加載 LLVM 的 Pass LLVM - Run Own Pass automatically with clang stack overflow 上的回答，試圖使用 clang 加載 LLVM 的 Pass。 Polly 库加載 LLVM Pass 的方法也是一个解决思路，我參考了這裏面的很多：Load Polly into clang and automatically run it at -O3 具体的加載過程參考了 Adrian Sampson 博客 Run an LLVM Pass Automatically with Clang 中提到的操作。 工作流程 準備工作 將系統中自帶的 llvm 和 clang 都卸載掉，保證 llvm 和 clang 版本的一致性（非常重要），即保證使用的 clang 和 編譯出的 Pass 的動態鏈接庫文件 .</description></item><item><title>2015-12-31 山野冬季野营（灵山）</title><link>https://blog.formalscience.com/2015/12/31/2015-12-31_%E5%B1%B1%E9%87%8E%E5%86%AC%E5%AD%A3%E9%87%8E%E8%90%A5%E7%81%B5%E5%B1%B1/</link><pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2015/12/31/2015-12-31_%E5%B1%B1%E9%87%8E%E5%86%AC%E5%AD%A3%E9%87%8E%E8%90%A5%E7%81%B5%E5%B1%B1/</guid><description>动机 参加了冬季集训，临近结束得知今年协会冬季野营目的地是灵山，时间是元旦假期。作为由于时间原因（实验室周日组会，雷打不动）从未参加过正式野营的人，我就报名了。另外灵山我也没去过，可以去拍拍照片。不过由于冬季野营不让带单反，我只好携带 LX5 了，轻一点也好，能够挂在脖子上。
路线 这次路线是从柏峪村进入，下马威出。具体路线图： 职务分配 这次我报了 押后。一路上大部分时间都在押我的好基友 zc，也没啥特别的感觉。好处是可以拍一些照片，不用担心卡住后面的队员。对于这个职务我还是比较喜欢，因为有种保护别人的感觉。后来发现走在队伍最后的确很适合拍摄全队照片。 体力分配 作为押后，要跟在最后一名队员后面，虽然速度不快，但是感觉也没那么轻松的。之前当路线的时候虽然要比别人走得快，但是反而很欢脱。可能是有心态的问题，不过整体而言还是很平和的，因为知道这样的行进强度自己还是没问题的。 雪地走得很有趣，硬雪壳穿着冰爪走得咔咔的，粉雪则不断向下滑需要用大冰镐或者登山杖撑着，湿的雪会沾到鞋子上就不好玩了，鞋子会湿。下坡如果是石头面就能踩着石头一层层下，如果是草甸就踩着草根下，如果是烂泥地或者粉土冰混合地形，就会滑，有人会摔跤。灵山还有其特殊之处，就是路上好多马粪，导致烂泥的成分比较复杂。
心态 这次的队员大部分走得快，我上坡的时候觉得自己速度慢，后来发现也不是，而是有状态好坏之分，由于一个决定性的事件，第三天状态就特别好（自我感觉）。以后还是要调整好心态。淡定淡定～ 技术训练 技术训练是沿路绳行军和滑坠制动，我对于上升转横切和横切转下降的操作都比较熟悉，还指导了别人。对于上升前的各项准备步骤，则是向 zc 和 sz 学了很多。滑坠制动，山上雪坡角度并不大，我强行滑下，制动，摆拍。 野营的学习 虽然之前协会腐败野营我还是名义上的帐篷长，但并没有学到如何当一名帐篷长。这次正式野营中，帐篷长 sz 把各项工作都安排得很好，大家配合很紧密，对于各种注意事项也和大家一一讲解。以后自己成为正式野营帐篷长得时候也要做到才好。
不足 主要是押后工作做得不是很好，第三天冲顶东灵山得时候，sqq 脚底有伤，走得慢，我只是一旁鼓励，没有给她分包。
趣事 星空很漂亮，可是第一天扎营后很快就到了熄灯时间，没时间拍。第二天晚上感觉星星没那么亮了，可能是旁边有个工地上大灯照射的原因。早上出发很早，看着头顶的北斗七星，特别平和。* 随着行走，看着天空由黑蓝变成灰蓝再到间杂着鱼肚白和黑红的过度，然后就迎来了日出。作为连清华园也不怎么出的我来说，只在东操拍过一次日出延时摄影，其他时间都没欣赏过。不过这次我第二天凌晨行军时还是不是看看东方的天空的，直到走到缆车上站的时候，太阳开始出来，大家拍照。效果肯定比不上专业的摄影者，不过这样的景色只有自己亲眼看过才算数。不得不说山里能看到的星星真是多真是亮啊！日出也是更纯净多彩！ 山的景色到没有特别感受，拍了一些照片回来合成了全景。 不经意一瞥，发现了蓝色天空和北京的雾霾之间有条明显的界限，心疼日常生活在雾霾中的人（包括我）。 - 不时看到鹰在头顶飞，很漂亮的身姿。 第二天扎营的时候我找到一个特别避风的地方放大，而且还有 3G 信号，简直是天王坑。在这之后感觉一身轻松，后一天状态极好。 尾声 总之也回来了，冬训的餐也聚了。而我在餐后骑车回来的路上和 zc 比赛抬自行车前轮和后轮，再次把手腕挫伤，也是逗逼了。现在写这篇总结也是属于身残志坚的行为了。
满意的照片</description></item><item><title>2015-12-19 第一次滑雪</title><link>https://blog.formalscience.com/2015/12/19/2015-12-19_%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%BB%91%E9%9B%AA/</link><pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2015/12/19/2015-12-19_%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%BB%91%E9%9B%AA/</guid><description>在知乎上看到一个问题，说人年龄大了就会感觉时间啊过得飞快。高票答案分析，这种感觉大体原理就是存在一个度量指标：当前的一年／你的人生已经度过的时间，这个值是越来越低的。当然怎样阐释这种感觉因人而异，我还是想在回望时候记得点什么的，于是写写自己的第一次系列以后看看也是挺好的。
滑雪很早就想去了，之前也看到同学分享的活动照片啥的，想去，但是没去。以后要注意，这种拖拖拖的态度会在各种角落蔓延，让生活没那么嗨。不过这次去滑雪是提前把实验室的啥基金申请书、年度报告之类的东西刷完才安心去的，想到滑雪回来后在人人上看到的一条新鲜事：
这个同学是周五何添楼爆照事故中去世的博士后的人人状态。自己没个周末的心态差不多也是类似的，不过我比较懒，没有要死要活地工作。事故当天表妹打了一个电话过来，问我事故的事情，看看她哥是不是受到了惊吓。周五一天都在写本子，还没什么感觉，现在感觉有些沉重。要把时间花在什么事情上？有时候以为自己清楚了，过后又会犹豫。
这次滑雪是沾了山野协会的光，雪协副会长也在山野，于是我们可以免费入会参加滑雪活动。到了雪场，兰姐教我们基本技能。我对自己的灵活敏捷指数认识很清楚，这种平衡类的我应该要多练一些才能掌握，后来练习动作的时候果然如此。上午两个多小时，下午两个多小时，中午吃了一个小包装的面包，味道还不错。上午的教学内容是装备知识、基本姿势动作、正确摔倒姿势、犁式滑雪、刹车、转弯，当然还有其他的进阶动作，我错过了，这些就够我练习一天了。下午动作讲解结束后，我还是没太掌握要领，一度不敢在坡度大的雪道上滑，怕撞到别人（其实也就是个初级道吧）。在下面缓坡墨迹了一会儿，还是做魔毯上去了，后来发现自己能够找到点自如刹车感觉后胆子就大了，也开始练习转向了。不过我的雪板可能确实有点大，总感觉速度太快，特别是和别人动作类似的情形下，还存在很大可能性是动作不到位。
摔是摔了的，包括零速度卡摔、速度太快脚撇太开导致失去平衡前滚翻、转向后无法再次回转又没及时刹车只能主动摔。当然还出现过有人站在雪道中间，我绕不过去，只能摔倒避免碰撞的。不过还算皮糙肉厚，没啥事儿。
回来和去时路上都在听歌睡觉吧，很快就到了。今天雾霾，不好，都红色警报了。
特别特别感谢兰姐，让我在第一次滑雪就接触了正确的姿势动作理念，避免练偏。
上面这张照片正中间的就是兰姐啦，正红色的冲锋衣，雪盔外面的毛线套是她自己织的哦。
另外，也没啥精彩照片了，我也算在专注练习吧，不过也可能是身为小弱鸟没心情。
2015-12-19</description></item><item><title>偷偷</title><link>https://blog.formalscience.com/2015/12/18/2015-12-18_%E5%81%B7%E5%81%B7/</link><pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2015/12/18/2015-12-18_%E5%81%B7%E5%81%B7/</guid><description>风在潜行去通知欢乐的消息
树呀花呀
都在咯咯笑
2015-06-13</description></item><item><title>过去与未来</title><link>https://blog.formalscience.com/2015/12/18/2015-12-18_%E8%BF%87%E5%8E%BB%E4%B8%8E%E6%9C%AA%E6%9D%A5/</link><pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2015/12/18/2015-12-18_%E8%BF%87%E5%8E%BB%E4%B8%8E%E6%9C%AA%E6%9D%A5/</guid><description>不知道自己对于未来是什么样的感觉，悲观还是乐观还是无所谓。自己喜欢看的描述未来的电影中无论是机械朋克的末日世界还是科技高度发达的现代化社会，还是人类已经虚拟化的假设，当然还有星际航行和外星文明，都让我内心觉得很愉悦。或许某天地球真的像《银河系漫游指南》中描述的一样，被一炮轰了呢。意义这个词让人平生烦恼，不过一想到自己也不过是一架基因复制机器，也就释然了呢。要超出这种桎梏，恐怕只有永生，无论是肉体永生还是人格虚拟化，甚至与周围的宇宙融合，恐怕就像佛教中每个部分都置换过的战鼓，还能否称为人类。
两面之神倒下
过去遗忘
未来停驻
废墟上开出花朵
无主的风吞噬一切
落下猩红的雨
利枪穿过胸膛
乌鸦在树梢环绕
消失在云雾迷绕的山岭
祈祷之声隐藏了恐慌
逝者不死
为上帝点燃灯烛
大雪之日无法留下印迹
凡间之人无需等待救赎
那是堕落天使曾经抛弃的荣光 2015－11－30</description></item></channel></rss>