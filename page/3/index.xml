<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>不是追风少年</title><link>https://blog.formalscience.com/</link><description>Recent content on 不是追风少年</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 29 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.formalscience.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Upgrade DigitalOcean's Ubuntu 17.04 to LTS version in 2018-06</title><link>https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/</guid><description>不是追风少年 https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/ -&lt;h2 id="what-happened">What happened?&lt;/h2>
&lt;p>I found my proxy for accessing some websites stopped working today, so I had to change my VPS&amp;rsquo;s IP address.
After some trials, everything seemed OK and I started watching a skiing video made by NorthFace on Youtube.&lt;/p>
&lt;p>Emmmm, I noticed 12 packages needed to be updated.
Well, I typed &lt;code>sudo apt-get update&lt;/code> and got messages like this (I didn&amp;rsquo;t save the error messages then):&lt;/p>
&lt;pre tabindex="0">&lt;code> 404 Not Found [IP: 91.189.91.23 80]
Ign:10 http://us.archive.ubuntu.com/ubuntu zesty-backports InRelease
Err:11 http://us.archive.ubuntu.com/ubuntu zesty Release
404 Not Found [IP: 91.189.91.26 80]
Err:12 http://us.archive.ubuntu.com/ubuntu zesty-updates Release
404 Not Found [IP: 91.189.91.26 80]
Err:13 http://us.archive.ubuntu.com/ubuntu zesty-backports Release
404 Not Found [IP: 91.189.91.26 80]
Reading package lists... Done
E: The repository &amp;#39;http://security.ubuntu.com/ubuntu zesty-security Release&amp;#39; does no longer have a Release file.
N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
E: The repository &amp;#39;http://us.archive.ubuntu.com/ubuntu zesty Release&amp;#39; does no longer have a Release file.
N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
E: The repository &amp;#39;http://us.archive.ubuntu.com/ubuntu zesty-updates Release&amp;#39; does no longer have a Release file.
N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
E: The repository &amp;#39;http://us.archive.ubuntu.com/ubuntu zesty-backports Release&amp;#39; does no longer have a Release file.
N: Updating from such a repository can&amp;#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
&lt;/code>&lt;/pre>&lt;p>Wow, It was the first time I encountered such things.
After some digging, I realized it was because Ubuntu 17.04 (zesty) was not supported any longer.&lt;/p>
&lt;p>According to &lt;a href="https://wiki.ubuntu.com/ZestyZapus/ReleaseNotes">https://wiki.ubuntu.com/ZestyZapus/ReleaseNotes&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Ubuntu 17.04 will be supported for 9 months until January 2018. If you need Long Term Support, it is recommended you use Ubuntu 16.04 LTS instead.&lt;/p>
&lt;/blockquote>
&lt;p>It means my current release version (Ubuntu 17.04) won&amp;rsquo;t receive any updates in the future.&lt;/p>
&lt;p>&lt;img src="https://assets.ubuntu.com/v1/f02f0a4b-r-eol-ubuntu-full-2018-02-28.png" alt="release-end-of-life-date">&lt;/p>
&lt;h2 id="how-to-upgrade">How to upgrade&lt;/h2>
&lt;p>I was struggled to reveal some steps to upgrade my Ubuntu 17.04 (End-of-Life) to 18.04 (LTS version).&lt;/p>
&lt;p>The official guide to upgrade from an Ubuntu release which reaches its “end of life” is: &lt;a href="https://help.ubuntu.com/community/EOLUpgrades">https://help.ubuntu.com/community/EOLUpgrades&lt;/a>&lt;/p>
&lt;h3 id="1-update-sourceslist">1. Update sources.list&lt;/h3>
&lt;p>The path of &lt;em>sources.list&lt;/em> is &lt;em>/etc/apt/sources.list&lt;/em>.&lt;/p>
&lt;pre tabindex="0">&lt;code>## EOL upgrade sources.list
# Required
deb http://old-releases.ubuntu.com/ubuntu/ CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ CODENAME-security main restricted universe multiverse
# Optional
#deb http://old-releases.ubuntu.com/ubuntu/ CODENAME-backports main restricted universe multiverse
&lt;/code>&lt;/pre>&lt;p>In my case, &lt;code>CODENAME&lt;/code> should be replaced by &lt;code>zesty&lt;/code>.&lt;/p>
&lt;h3 id="2-upgrade">2. Upgrade&lt;/h3>
&lt;p>Try &lt;code>apt-get upgrade&lt;/code>, and I got:&lt;/p>
&lt;pre tabindex="0">&lt;code>dpkg: dependency problems prevent configuration of ubuntu-standard:
ubuntu-standard depends on libpam-systemd; however:
Package libpam-systemd:amd64 is not configured yet.
&lt;/code>&lt;/pre>&lt;p>By some method suggested by stackoverflowers, I finally got over it by these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo dpkg --force-all -P libpam-systemd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get -f install libpam-systemd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-dist-upgrade">3. Dist Upgrade&lt;/h3>
&lt;p>These are some normal steps for an upgrade.&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt-get dist-upgrade
sudo do-release-upgrade
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;re unlucky like me, you will not upgrade to a newer release completely.
You may see:&lt;/p>
&lt;pre tabindex="0">&lt;code>Package grub-efi-amd64 is not configured yet.
&lt;/code>&lt;/pre>&lt;p>According to &lt;a href="https://askubuntu.com/questions/330531/unable-to-fix-broken-package-system">a question&lt;/a> asked by someone, you can try this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo dpkg --force-all -P grub-efi-amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo dpkg --force-all -P grub-efi-amd64-signed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Execute &lt;code>sudo apt-get update&lt;/code> and &lt;code>sudo apt-get upgrade&lt;/code>.&lt;/p>
&lt;h3 id="4-thoughts">4. Thoughts&lt;/h3>
&lt;p>I first upgraded to Ubuntu 17.10 then Ubuntu 18.04.&lt;/p>
&lt;p>To see if I have done the right things, I check the release version by &lt;code>sudo lsb_release -a&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>Distributor ID: Ubuntu
Description: Ubuntu 18.04 LTS
Release: 18.04
Codename: bionic
&lt;/code>&lt;/pre>&lt;p>Is it the DigitalOcean&amp;rsquo;s customized release makes the upgrade so complex for a non-expert programmer or the Ubuntu release itself?&lt;/p>
&lt;p>But apparently, I&amp;rsquo;m not the only one who is confused by the error messages and asks questions on the web. Luckily I&amp;rsquo;ve found helping answers I need.&lt;/p>
&lt;p>The commands with words like &lt;code>force&lt;/code> or &lt;code>-f&lt;/code> make me feel anxious.&lt;/p>
&lt;blockquote>
&lt;p>These violent delights have violent ends.
&amp;mdash; by Shakespeare&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.vox-cdn.com/thumbor/NxFcQHzIb1eqgk5EXafSzFwy2UU=/0x0:5100x3400/920x613/filters:focal(1816x555:2632x1371):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/52220535/westworld_dolores.0.jpeg" alt="Dolores">&lt;/p>
&lt;p>Anyway, it works.&lt;/p>
- https://blog.formalscience.com/2018/06/23/2018-06-23_update_vps_ubuntu_version/ -</description></item><item><title>2016 十一塞罕坝行动</title><link>https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/</link><pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/</guid><description>不是追风少年 https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/ -&lt;p>这是很久之前应该出现的一篇日志，当时忙于处理照片、毕业论文之类的事情，加上强烈的懈怠情绪，一直没写。&lt;/p>
&lt;hr>
&lt;p>2016 年暑假过后开学不久，政委喊大家出去骑车，这注定会很有趣。目的地是承德的塞罕坝，不是张家口的坝上草原。
主题是骑行、赏秋景。大家确认好时间后，大家定了火车票，提前去西直门北京北站托运了自行车。剩下的就是等待出行了。&lt;/p>
&lt;p>塞罕坝国家森林公园位于承德北部，毗邻内蒙古（上面），是清代皇家猎苑一部分，集满蒙汉三民族文化。
景区内有七星湖、太阳湖、泰丰湖、白桦林、月亮湖等较大的景点和多个小景点，自然风光和人文遗迹于一体。
（注：这些湖我们一个也没去，人文遗迹也没看到）
另外，还珠格格就是在这个地方被他皇阿玛一箭射中的。&lt;/p>
&lt;p>整体路线规划为：&lt;/p>
&lt;ul>
&lt;li>北京北 - 四合永镇 （火车）&lt;/li>
&lt;li>四合永镇 - 围场县 （骑车、住宿）&lt;/li>
&lt;li>围场县 - 机械林场 （骑车、住宿）&lt;/li>
&lt;li>机械林场 - 半截塔镇 （骑车、住宿）&lt;/li>
&lt;li>半截塔镇 - 隆化县 （骑车）&lt;/li>
&lt;li>隆化县 - 北京北 （火车）&lt;/li>
&lt;/ul>
&lt;h2 id="day-0">Day 0&lt;/h2>
&lt;p>火车上的旅行总是欢快的，小帅哥 YL 拿了很多桌游，大家玩啊玩。
在玩阿瓦隆的时候，某个女博士一脸愁容，明显就是脑细胞不够用的表现。
路上路过了很多听过但是没去过的地方，比如古北口。&lt;/p>
&lt;p>到了四合永镇，取车合影。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-together1.jpg" alt="Gubeikou">&lt;/p>
&lt;p>到围场县很近，我们很快就骑到了，安顿好了住宿。肚子饿的呱呱叫，出去觅食，集体决定吃火锅（作为吃饭不挑剔的我当然也给不出什么建设性意见）。
一行人吃得热火朝天，风生水起，生龙活虎。最后算账，人均三十。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-together2.jpg" alt="Hot Pot">&lt;/p>
&lt;p>然后去附近的超市准备接下来几天的食粮。水果、面包、零食、饮料，各种东西都来点。
逛超市比较有意思的是看到各种东西分门别类堆在一起，那么多，又都很光鲜。虽然不能都买了，但总有种莫名的愉悦感。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-things1.jpg" alt="Supermarket">&lt;/p>
&lt;p>晚上还是玩玩玩，时刻压制住情绪，以免吵到其他人。&lt;/p>
&lt;h2 id="day-1">Day 1&lt;/h2>
&lt;p>第二天按时起床，旁边小店吃了早饭，准备出发。
说到这个出发，还是有些字面意义上的周折。小城在修路，大家凭着感觉和导航终于骑了出去。&lt;/p>
&lt;p>骑车嘛，还是为了拍照。一路上大家各种互拍、自拍，对着天空、河流、群山拍。&lt;/p>
&lt;p>骑车嘛，总会爆胎，尤其是漂亮的那种车，比如鲜红的挑战者 300。一路上补过胎的，没经验的，也基本都学会了。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene1.jpg" alt="scene1">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene2.jpg" alt="scene2">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene4.jpg" alt="scene4">&lt;/p>
&lt;p>这样的景色大家拍来拍去，怎么也拍不厌。骑在这样的路上，也感觉不累（假的，毕竟在爬大坡）。&lt;/p>
&lt;p>接近傍晚，天空的颜色变得多彩，而眼前原野的景色淡下去了。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene5.jpg" alt="scene5">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene3.jpg" alt="scene3">&lt;/p>
&lt;p>剩下的就是赶路了，还要走一段公路到机械林场。虽然路上的景色也很美，但是看不到，只能通过黑黢黢的树影摇曳想象了。路上发生了一起意外，美女 GY 摔车了。
简单处理了一下，也只能继续骑车。到了机械林场后买了创可贴和碘酒暂时顶一下。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-together4.jpg" alt="together4">&lt;/p>
&lt;p>晚上十点多大家吃了羊腿饭，景区物价高，不过仍不及五道口。住宿的话，还停暖和的，三个大男生挤一挤了，另外的妹子们怎么睡都随意了，虽然大家都是在一间屋子里吧。&lt;/p>
&lt;h2 id="day-2">Day 2&lt;/h2>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-together5.jpg" alt="together5">&lt;/p>
&lt;p>第二天早上在店家吃了早餐，馒头、稀饭、饼、鸡蛋、炒小菜，典型的住店组合套餐（甚至在西藏也是这种组合……）。
出去后，开始下小雪，然后是小雨。大家都披上了雨衣。不过这注定是狼狈的、凄惨的、励志的一天 ……
我不说别人了，就说我自己吧。首先我的鞋子是登山鞋，防水的那种，可以避免水从外面进来，也可以防止水从里面出去。于是我就相当于穿着一个便携泡脚盆在骑车。
总之就是一种说不清道不明的酸楚与傻乐呵在心中交织。&lt;/p>
&lt;p>最大的收获是，雨中的山林颜色更加润了。眼前的雨虽然冷，但是远处的雾气很没啊，我们是不畏风雨的骑车人。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene6.jpg" alt="scene6">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene7.jpg" alt="scene7">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene8.jpg" alt="scene8">&lt;/p>
&lt;p>遇到一个便利店，大家进去买了各种包裹隔离物品（塑料袋），试图把自己的脚和腿保护起来。
中午在一个小饭馆吃了面，面对有点凶狠的狗去上了厕所。
吃完饭接着骑车，然后大家的车纷纷爆了胎，前面爆完后面爆胎。
忘记提的一点是，我带的补胎片失效了。
而备胎也用光了，于是各种打气筒接力打气艰难前行。
直到政委看到了一个给汽车补胎的地方，我们借用先进装备磨胎，强力胶水补胎，颇有种鸟枪换炮的感觉。&lt;/p>
&lt;p>我最为先锋官，到了半截塔镇，发现了一个问题：有人办婚礼，没旅馆可以住了。
大家到了后，决定一拨人先买点东西吃饭，政委向来时方向去找住的地方，我向前面骑，去看看镇子里有没有住的地方。
我本来看到一家说可以的，但是后来店主说很抱歉，他现在在外地，只有自己孩子在家不放心。
幸好政委找到了一家汽车旅馆，住的地方有着落了，安心吃饭喽。&lt;/p>
&lt;p>这天路上还遇到了交通事故，别人的。车堵了好几公里，我们骑车经过拥堵路段，骑在没车的路上，好爽啊。&lt;/p>
&lt;p>这个汽车旅馆洗漱都要在屋子外面的，水冰凉。
睡之前大家把坏掉的车胎都换了。大家不停吐槽，车胎上面粘的泥里一股马粪味儿。
我和政委一屋，拿出了宝具 - 吹风机，开始吹白天被灌湿的登山鞋。
效果吗？还是超群的。累了，就睡得好了。&lt;/p>
&lt;h2 id="day-3">Day 3&lt;/h2>
&lt;p>因为今天要赶车，大家还是早起，吃了一点行动食品就出发了。
到了一个村子里，发现了卖包子的地方，于是纷纷买包子吃。
发现骑车的时候，怎么吃都吃不饱啊。
今天的天气，好极了，阳光灿烂。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene9.jpg" alt="scene9">&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-scene10.jpg" alt="scene10">&lt;/p>
&lt;p>大家嫌拍照片不过瘾，开始各种拍视频、拍延时，不亦乐乎。&lt;/p>
&lt;p>我在前面骑，突然感觉内心迸发出无比力量，蹭蹭蹭。一路冲到了隆化县城火车站。
后来听闻某美女骑车走神，冲到了别人的电动三轮车车斗里面 ……&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/2016-selfie1.jpg" alt="selfie1">&lt;/p>
&lt;p>[我一个人吃果粒爽，真是太好吃了 ……]&lt;/p>
&lt;p>县城汇合后吃了羊蝎子，味道赞赞赞，食材很给力。让我的冲锋衣回去后携带的羊油气息经久不散 ……&lt;/p>
&lt;p>吃完大家就去坐车了。火车上的时候我就开始傲娇了，伙伴们换了座位玩桌游，我却不想去，自己一个人坐在一个车厢里。
现在想想，很多时候情绪就不受自己控制了，当时有什么好的处理方法吗？&lt;/p>
&lt;h2 id="day-4">Day 4&lt;/h2>
&lt;p>回学校了。&lt;/p>
&lt;hr>
&lt;p>一起骑车的小伙伴，有的还要继续在学校几年，有的已经要毕业了。想起你们，还是有些伤感的，在杭州有些孤单。&lt;/p>
&lt;p>祝你们顺利。&lt;/p>
- https://blog.formalscience.com/2018/05/27/2018-05-27_2016_%E5%8D%81%E4%B8%80%E5%A1%9E%E7%BD%95%E5%9D%9D%E8%A1%8C%E5%8A%A8/ -</description></item><item><title>理解 C++ Traits</title><link>https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/</link><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/</guid><description>不是追风少年 https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/ -&lt;p>C++ 是我学习的第一种编程语言，当时是 2007 年。现在 C++ 标准委员会已经在讨论 2020 年要发布的特性了，我连 2011 年发布的 Traits 都还不知道是啥。今天下定决心了解总结一下。&lt;/p>
&lt;p>C++ 之父 Bjarne Stroustrup 说：&lt;/p>
&lt;blockquote>
&lt;p>Think of a trait as a small object whose main purpose is to carry information used by another object or algorithm to determine “policy” or “implementation details”.&lt;/p>
&lt;/blockquote>
&lt;p>嗯，这段描述也比较抽象。我的理解是，trait 把不同类型的特定信息进行打包，用在算法或者其他对象中。这样算法或者其他对象的设计可以做到更加通用，通过 trait 打包的信息进行策略选择或者实现细节。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/trait1.png" alt="trait1">&lt;/p>
&lt;p>这段代码判断两个类型的关系。第 4 行的模板以两个类型作为参数，通过结构体 &lt;code>type_relation&lt;/code> 的成员 &lt;code>relation&lt;/code> 获取比较结果。当前代码输出：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-output" data-lang="output">type_relation&amp;lt;bool, int&amp;gt;: different
type_relation&amp;lt;int, int&amp;gt;: different
&lt;/code>&lt;/pre>&lt;p>这段代码并未实现预期功能，因为比较 &lt;code>bool&lt;/code> 和 &lt;code>int&lt;/code>，以及 &lt;code>int&lt;/code> 和 &lt;code>int&lt;/code> 时，都输出 &lt;code>&amp;quot;different&amp;quot;&lt;/code> 。下面继续完善这个 trait 实现。&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/trait2.png" alt="trait2">&lt;/p>
&lt;p>第 11 行的类型参数种使用 &lt;code>&amp;lt;T, T&amp;gt;&lt;/code> （即两个相同的类型）进行模式匹配。这段代码输出：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-output" data-lang="output">type_relation&amp;lt;bool, int&amp;gt;: different
type_relation&amp;lt;int, int&amp;gt;: equal
&lt;/code>&lt;/pre>&lt;p>输出结果正确完成了类型比较的功能。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>实现&lt;/strong>&lt;/p>
&lt;p>trait 的实现基于 C++ 的模板引擎（template engine），能够在**编译时期（compile time）**将模板（基于最匹配的模式）展开。如果要在 Golang 或者 Java 种实现类似功能，可以使用反射或者 interface 之类的方法，而这些方法都是在运行时（runtime）进行判定，不可避免带来性能开销。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>进阶&lt;/strong>&lt;/p>
&lt;p>除了可以比较两个类型是否相等，还可以在类型参数上添加其他约束，例如：&lt;code>*&lt;/code>、&lt;code>[]&lt;/code> 等。下面是一个稍微复杂一些的版本：&lt;/p>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/trait3.png" alt="trait3">&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-output" data-lang="output">type_relation&amp;lt;bool, int&amp;gt;: different
type_relation&amp;lt;int, int&amp;gt;: equal
type_relation&amp;lt;int*, int&amp;gt;: is pointer of
type_relation&amp;lt;int[], int&amp;gt;: is array of
type_relation&amp;lt;int[4], int&amp;gt;: is array (length 4) of
&lt;/code>&lt;/pre>&lt;p>当然这个“进阶”仅仅是比上面的例子复杂了一些，trait 还有更多能力。
C++ 的模板引擎为 C++ 提供了强大的元编程（meta programming）能力，也使得现代的 C++ 代码看上去比较奇怪。
事实上模板引擎是图灵完备的，如果使用好的话，能够将 C++ 的易用性和优雅性提升到一个高度（从那些看不到模板实现细节的用户的视角）。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>感想&lt;/strong>&lt;/p>
&lt;p>每次 C++ 标准更新的新闻我都看到了，从 C++0X、C++11、C++14 到 C++17，新出的特性一直在关注，可却从来没有真正编写一段程序去试试这些特性。这让我很伤感。&lt;/p>
&lt;p>看到新的语言就想去尝试，OCaml、Clojure、Haskell …… 这些语言都很有特色，OCaml 让我体会到模式匹配的爽快，Clojure 让我体会到 S-表达式的自由和 Lisp 宏的强大，Haskell 让我体会到抽象的威力以及自己脑容量的有限。可是工作中用的最多的还是 Python、Java 和 C，当然还有 PHP （这个不能忘）。&lt;/p>
&lt;p>想我和 C++ 的关系，最初的时候还是看的 Bjarne Stroustrup 的《The C++ Programming Language》。后来怎么就越走越远了呢？虽然现在工作中暂时依旧用不到，还是希望以此为契机，了解更多模板引擎可以做的事情。&lt;/p>
&lt;p>追逐过的其他语言，各有各的契机，或许是缘分，或许是喜欢，或许是虚荣。现在都不敢说自己会 C++ 了。
如果当时能够更专注一些，自己目前的职业轨迹会不会有所区别？&lt;/p>
&lt;p>想起最初自己理解 Haskell 里 &lt;code>Monad&lt;/code> 概念的时候，一头雾水。后来懂了，就是懂了。为什么偏爱某一种语言呢？我也搞不清楚自己。&lt;/p>
&lt;p>也许爱情也是如此，回忆当初做的不同结果是否能够更好？也许。记住过往，抗拒住回忆的诱惑，很难，但不得不做。喜欢的，就喜欢着吧。有些事情就是不行，正如有些事情莫名其妙地发生。&lt;/p>
&lt;p>Just live with it.&lt;/p>
- https://blog.formalscience.com/2018/05/12/2018-05-12_%E7%90%86%E8%A7%A3_c-_traits/ -</description></item><item><title>‘How Does Monero Work?' 笔记</title><link>https://blog.formalscience.com/2018/01/21/how-does-monero-work-%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 21 Jan 2018 15:46:20 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/21/how-does-monero-work-%E7%AC%94%E8%AE%B0/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/21/how-does-monero-work-%E7%AC%94%E8%AE%B0/ -&lt;p>Monero 门罗币的一个&lt;a href="https://www.youtube.com/watch?v=cjbHqvr4ffo&amp;amp;list=PL2-dafEMk2A7jW7CYUJsBu58JH27bqaNL">介绍视频&lt;/a>&lt;/p>
&lt;p>我刚买到 1070Ti 显卡时曾经想要挖过这个币，后来放弃了，觉得没有意义。不过了解这个技术的一些原理还是有价值的。&lt;/p>
&lt;hr>
&lt;p>Siraj Raval 的免责声明：
&lt;/p>
&lt;blockquote>
&lt;p>Monero 是一种不可追踪的加密货币，网络上很多非法买卖东西的人会使用它。他介绍这个技术的原因是：你应当对你的数据有控制权，而很多数据是交易数据（transactional data）。目前很多公司可以从中免费挖掘信息，用来预测你的购买行为，以便向你展示广告。理想情况下他们应当为你的数据付费，而他们付费的唯一可能是你控制着数据，而唯一控制数据的方式为数据是匿名的。为了查阅你的交易历史，&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.formalscience.com/uploads/monero1.png" alt="">&lt;/p>
- https://blog.formalscience.com/2018/01/21/how-does-monero-work-%E7%AC%94%E8%AE%B0/ -</description></item><item><title>两个玻璃球（网上流传的面试题）</title><link>https://blog.formalscience.com/2018/01/17/%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Wed, 17 Jan 2018 19:57:18 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/17/%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/17/%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/ -&lt;p>据说这是 Google 的一个面试题：&lt;/p>
&lt;blockquote>
&lt;p>有一栋 100 层高的大楼，有两个完全相同的玻璃球。假设从某一层开始丢下玻璃球会摔碎，利用手中的两个玻璃球确定是第几层。最少扔几次玻璃球可以确定这个临界楼层（玻璃球在这一层以及更高的楼层扔下会摔碎）？&lt;/p>
&lt;/blockquote>
&lt;p>就如孔子说过的那句名言 &amp;ldquo;I Never Said All That Shit&amp;rdquo; 一样，这个题目出自哪里我也没有去考证。下面把我的思路整理一下。&lt;/p>
&lt;p>如果只有一个玻璃球，能做的就是从 1 层开始尝试扔下玻璃球，然后尝试 2 层、3 层 ……，直到某一层扔下玻璃球后摔碎。而现在有两个玻璃球，我们可以用一个玻璃球从 1 层、11 层、21 层 …… 扔下去，确定一个较小的破碎范围，然后使用第二个玻璃球确定具体的楼层。&lt;/p>
&lt;p>假如总共 N 层，我们从第 X 层扔下第一个玻璃球，有两种可能性：玻璃球摔碎或者没碎。如果玻璃球摔碎，说明临界楼层在 1~X 中；如果没摔碎，则临界楼层在 X+1~N 中。&lt;/p>
&lt;p>如果临界楼层在 1~N 中是均匀分布的，那么 $N &amp;gt; 2$ 时确定临界楼层需要扔玻璃球的最少次数可以由以下公式表示：&lt;/p>
&lt;p>$$
f(N)= \min_{X \in [1, N]} {1 + f(N-X)\frac{N-X}{N} + g(X)\frac{X}{N}}
$$&lt;/p>
&lt;p>$f(N)$ 为使用两个玻璃球确定区间长度为 N 时的临界楼层所用次数，$g(X)$ 为使用一个玻璃球确定区间长度为 N 时的临界楼层所用次数。这个公式的三部分分别对应：&lt;/p>
&lt;ul>
&lt;li>一次扔玻璃球的尝试&lt;/li>
&lt;li>玻璃球未摔碎概率$\times$此时继续尝试需要的次数 $f(N-X)$（两个玻璃球）&lt;/li>
&lt;li>玻璃球摔碎概率$\times$此时继续尝试需要的次数 $g(X)$（一个玻璃球）。&lt;/li>
&lt;/ul>
&lt;p>显然有 $f(1)=0$，$g(N)=N-1$。可以用动态规划求解 $N=100$ 时需要的最少次数。&lt;/p>
- https://blog.formalscience.com/2018/01/17/%E4%B8%A4%E4%B8%AA%E7%8E%BB%E7%92%83%E7%90%83%E7%BD%91%E4%B8%8A%E6%B5%81%E4%BC%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/ -</description></item><item><title>Golang 系统调用/Syscall</title><link>https://blog.formalscience.com/2018/01/15/golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/</link><pubDate>Mon, 15 Jan 2018 20:59:11 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/15/golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/15/golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/ -&lt;h1 id="概述">概述&lt;/h1>
&lt;p>很多和系统相关的函数都需要调用系统 API，例如读写文件的函数。Golang 对一些系统调用接口进行了封装，提供了 Golang 函数让用户调用，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">fd&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">fd&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，Golang 也提供了对 Syscall 的直接调用支持：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Syscall&lt;/span>(&lt;span style="color:#a6e22e">trap&lt;/span>, &lt;span style="color:#a6e22e">a1&lt;/span>, &lt;span style="color:#a6e22e">a2&lt;/span>, &lt;span style="color:#a6e22e">a3&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">r1&lt;/span>, &lt;span style="color:#a6e22e">r2&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#a6e22e">Errno&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Syscall6&lt;/span>(&lt;span style="color:#a6e22e">trap&lt;/span>, &lt;span style="color:#a6e22e">a1&lt;/span>, &lt;span style="color:#a6e22e">a2&lt;/span>, &lt;span style="color:#a6e22e">a3&lt;/span>, &lt;span style="color:#a6e22e">a4&lt;/span>, &lt;span style="color:#a6e22e">a5&lt;/span>, &lt;span style="color:#a6e22e">a6&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">r1&lt;/span>, &lt;span style="color:#a6e22e">r2&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#a6e22e">Errno&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RawSyscall&lt;/span>(&lt;span style="color:#a6e22e">trap&lt;/span>, &lt;span style="color:#a6e22e">a1&lt;/span>, &lt;span style="color:#a6e22e">a2&lt;/span>, &lt;span style="color:#a6e22e">a3&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">r1&lt;/span>, &lt;span style="color:#a6e22e">r2&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#a6e22e">Errno&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">RawSyscall6&lt;/span>(&lt;span style="color:#a6e22e">trap&lt;/span>, &lt;span style="color:#a6e22e">a1&lt;/span>, &lt;span style="color:#a6e22e">a2&lt;/span>, &lt;span style="color:#a6e22e">a3&lt;/span>, &lt;span style="color:#a6e22e">a4&lt;/span>, &lt;span style="color:#a6e22e">a5&lt;/span>, &lt;span style="color:#a6e22e">a6&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) (&lt;span style="color:#a6e22e">r1&lt;/span>, &lt;span style="color:#a6e22e">r2&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#a6e22e">Errno&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>RawSyscall&lt;/code> 和 &lt;code>RawSyscall6&lt;/code> 是对操作系统 Syscall 的直接调用；&lt;code>Syscall&lt;/code> 和 &lt;code>Syscall6&lt;/code> 会在调用操作系统 Syscall 前调用 &lt;code>runtime·entersyscall&lt;/code> ，在操作系统 Syscall 返回后调用 &lt;code>runtime·exitsyscall&lt;/code> 。&lt;/p>
&lt;p>这四个函数都是使用汇编语言实现，代码和具体的硬件体系结构和操作系统有关。&lt;code>RawSyscall&lt;/code> 和 &lt;code>RawSyscall6&lt;/code> 的行为和 C 语言中系统调用很类似，在这里不展开描述。而 &lt;code>Syscall&lt;/code> 和 &lt;code>Syscall6&lt;/code> 的行为（在进行真正的系统调用前后插入额外操作）与 Golang 的调度器关系紧密，在下面会进行要点描述。&lt;/p>
&lt;p>&lt;code>Syscall&lt;/code> 的关键在于 &lt;code>runtime·entersyscall&lt;/code> 和 &lt;code>runtime·exitsyscall&lt;/code> ，而 &lt;code>runtime·entersyscall&lt;/code> 还有一个行为有部分差异的版本 &lt;code>runtime·entersyscallblock&lt;/code> 。&lt;/p>
&lt;h1 id="runtimeentersyscall">&lt;code>runtime·entersyscall&lt;/code>&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">entersyscall&lt;/span>(&lt;span style="color:#a6e22e">dummy&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reentersyscall&lt;/span>(&lt;span style="color:#a6e22e">getcallerpc&lt;/span>(), &lt;span style="color:#a6e22e">getcallersp&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">dummy&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reentersyscall&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getg&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Disable preemption because during this function g is in Gsyscall status,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// but can have inconsistent g-&amp;gt;sched, do not let GC observe it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">locks&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Entersyscall must not call any function that might split/grow the stack.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// (See details in comment above.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Catch calls that might, by replacing the stack guard with something that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// will trip any stack check and leaving a flag to tell newstack to die.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stackguard0&lt;/span> = &lt;span style="color:#a6e22e">stackPreempt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">throwsplit&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Leave SP around for GC and traceback.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">syscallsp&lt;/span> = &lt;span style="color:#a6e22e">sp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">syscallpc&lt;/span> = &lt;span style="color:#a6e22e">pc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">casgstatus&lt;/span>(&lt;span style="color:#a6e22e">_g_&lt;/span>, &lt;span style="color:#a6e22e">_Grunning&lt;/span>, &lt;span style="color:#a6e22e">_Gsyscall&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">syscallsp&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">lo&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">hi&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">syscallsp&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">systemstack&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;entersyscall inconsistent &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hex&lt;/span>(&lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">syscallsp&lt;/span>), &lt;span style="color:#e6db74">&amp;#34; [&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hex&lt;/span>(&lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">lo&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hex&lt;/span>(&lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stack&lt;/span>.&lt;span style="color:#a6e22e">hi&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;]\n&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;entersyscall&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">systemstack&lt;/span>(&lt;span style="color:#a6e22e">traceGoSysCall&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// systemstack itself clobbers g.sched.{pc,sp} and we might
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// need them later when the G is genuinely blocked in a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// syscall
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sched&lt;/span>.&lt;span style="color:#a6e22e">sysmonwait&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">systemstack&lt;/span>(&lt;span style="color:#a6e22e">entersyscall_sysmon&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ptr&lt;/span>().&lt;span style="color:#a6e22e">runSafePointFn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// runSafePointFn may stack split if run on this stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">systemstack&lt;/span>(&lt;span style="color:#a6e22e">runSafePointFn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">syscalltick&lt;/span> = &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ptr&lt;/span>().&lt;span style="color:#a6e22e">syscalltick&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">sysblocktraced&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">mcache&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ptr&lt;/span>().&lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ptr&lt;/span>().&lt;span style="color:#a6e22e">status&lt;/span>, &lt;span style="color:#a6e22e">_Psyscall&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sched&lt;/span>.&lt;span style="color:#a6e22e">gcwaiting&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">systemstack&lt;/span>(&lt;span style="color:#a6e22e">entersyscall_gcwait&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Goroutines must not split stacks in Gsyscall status (it would corrupt g-&amp;gt;sched).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// We set _StackGuard to StackPreempt so that first split stack check calls morestack.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Morestack detects this case and throws.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">stackguard0&lt;/span> = &lt;span style="color:#a6e22e">stackPreempt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">locks&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>runtime·entersyscall&lt;/code> 主要完成以下几件事：&lt;/p>
&lt;ol>
&lt;li>声明函数为 &lt;code>NOSPLIT&lt;/code> ，不触发栈扩展检查&lt;/li>
&lt;li>禁止抢占&lt;/li>
&lt;li>通过 &lt;code>dummy&lt;/code> 参数获得调用者的 &lt;code>SP&lt;/code> 和 &lt;code>PC&lt;/code> 的值，并保存到 goroutine 的 &lt;code>syscallsp&lt;/code> 和 &lt;code>syscallpc&lt;/code> 字段。同时记录 &lt;code>syscallstack&lt;/code> 和 &lt;code>syscallguard&lt;/code> ，使得垃圾回收器只对系统调用前的栈进行 &lt;strong>mark-sweep&lt;/strong> （cgo 机制也利用了 &lt;code>entersyscall&lt;/code> 来使得 cgo 中运行的代码不受垃圾回收机制管理）。&lt;/li>
&lt;li>将 goroutine 的状态切换到 Gsyscall 状态。&lt;/li>
&lt;li>唤醒后台线程 &lt;code>sysmon&lt;/code> （这个线程会监控执行 &lt;code>syscall&lt;/code> 的线程，如果超过某个时间阈值，就会将 M 与对应的 P 解除绑定）。&lt;/li>
&lt;li>置空 M 的 &lt;code>mcache&lt;/code> 、将 P 的 &lt;code>m&lt;/code> 字段，切换 P 的状态到 &lt;code>Psyscall&lt;/code>&lt;/li>
&lt;li>检查是否需要垃圾回收&lt;/li>
&lt;li>通过 &lt;code>g-&amp;gt;stackguard0 = StackPreempt&lt;/code> 使得出现 &lt;em>split stack&lt;/em> 时可以通过 &lt;code>morestack&lt;/code> 捕获并抛出错误&lt;/li>
&lt;li>恢复抢占&lt;/li>
&lt;/ol>
&lt;p>可以看到 &lt;code>reentersyscall&lt;/code> 多次调用 &lt;code>save&lt;/code> 保存 &lt;code>pc&lt;/code> 和 &lt;code>sp&lt;/code>。&lt;code>save&lt;/code> 更新 &lt;code>getg().sched&lt;/code> 中的 &lt;code>sp&lt;/code> 和 &lt;code>pc&lt;/code> ，使得调用 &lt;code>gogo&lt;/code> 的时候可以恢复 &lt;code>pc&lt;/code> 和 &lt;code>sp&lt;/code> 。&lt;code>reentersyscall&lt;/code> 中 &lt;code>save&lt;/code> 的目的都是为 goroutine 跳回这个 &lt;code>syscall&lt;/code> 调用者执行 &lt;code>syscall&lt;/code> 时刻的 &lt;code>pc&lt;/code> 和 &lt;code>sp&lt;/code>做准备。&lt;/p>
&lt;p>需要继续深入：&lt;/p>
&lt;ol>
&lt;li>&lt;code>StackPreempt&lt;/code>&lt;/li>
&lt;li>&lt;code>syscallstack&lt;/code> 和 &lt;code>syscallguard&lt;/code> 的具体作用时机&lt;/li>
&lt;/ol>
&lt;h1 id="runtimeentersyscallblock">&lt;code>runtime·entersyscallblock&lt;/code>&lt;/h1>
&lt;p>与 &lt;code>runtime·entersyscall&lt;/code> 区别在于这个函数认为当前执行的 &lt;code>syscall&lt;/code> 会运行较长时间，因此在函数中主动进行了 M 和 P 的解除绑定，无需等待 &lt;code>sysmon&lt;/code> 处理。解除 M 和 P 绑定的逻辑由 &lt;code>entersyscallblock_handoff&lt;/code> 实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">entersyscallblock_handoff&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">traceGoSysCall&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">traceGoSysBlock&lt;/span>(&lt;span style="color:#a6e22e">getg&lt;/span>().&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ptr&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handoffp&lt;/span>(&lt;span style="color:#a6e22e">releasep&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="runtimeexitsyscall">&lt;code>runtime·exitsyscall&lt;/code>&lt;/h1>
&lt;p>主要实现了从 &lt;code>syscall&lt;/code> 状态中恢复的动作：&lt;/p>
&lt;ol>
&lt;li>尝试调用 &lt;code>exitsyscallfast&lt;/code> ，如果 M 与 P 没有完全解除绑定，那么该操作会将 M 和 P 重新绑定；否则获取一个空闲的 P 与当前 M 绑定。如果绑定成功，返回 &lt;code>True&lt;/code>，否则返回 &lt;code>False&lt;/code> 进行后续步骤处理。&lt;/li>
&lt;li>如果 &lt;code>exitsyscallfast&lt;/code> 返回 &lt;code>True&lt;/code> ，函数就直接返回；返回 &lt;code>False&lt;/code>，则进入 &lt;em>slow path&lt;/em> 将当前 goroutine 放到任务队列中等待调度，具体实现由 &lt;code>mcall(exitsyscall0)&lt;/code> 实现。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>exitsyscall0&lt;/code> 这个函数比较清晰，只是对其中 &lt;code>dropg()&lt;/code> 的目的还没想清楚。&lt;/p>
&lt;p>&lt;code>runtime·exitsyscall&lt;/code> 的函数说明中提到的 &lt;code>// Write barriers are not allowed because our P may have been stolen.&lt;/code> 也没有搞清楚，知道和 GC 有一定关系。&lt;/p>
&lt;h1 id="引用">引用&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://studygolang.com/articles/7005">https://studygolang.com/articles/7005&lt;/a>&lt;/li>
&lt;/ol>
- https://blog.formalscience.com/2018/01/15/golang-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-syscall/ -</description></item><item><title>Golang 中学到的新东西</title><link>https://blog.formalscience.com/2018/01/14/golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/</link><pubDate>Sun, 14 Jan 2018 11:53:30 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/14/golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/14/golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/ -&lt;h1 id="数据类型">数据类型&lt;/h1>
&lt;h2 id="string-类型">&lt;code>string&lt;/code> 类型&lt;/h2>
&lt;p>&lt;code>string&lt;/code> 类型使用 2 个 word（64 bit 系统为 8 byte * 2）表示：一个 word 是指针，指向字符串存储区域；一个 word 表示长度数据。&lt;/p>
&lt;h2 id="slice-leftrightarrow-unsafepointer">&lt;code>slice&lt;/code> $\leftrightarrow$ &lt;code>unsafe.Pointer&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">200&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ptr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ptr&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> ((&lt;span style="color:#f92672">*&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>]&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">ptr&lt;/span>))[:&lt;span style="color:#ae81ff">200&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ptr&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">s1&lt;/span> = &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">len&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cap&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}{&lt;span style="color:#a6e22e">ptr&lt;/span>, &lt;span style="color:#a6e22e">length&lt;/span>, &lt;span style="color:#a6e22e">length&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>[]&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s1&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sliceHeader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">SliceHeader&lt;/span>)((&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">o&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sliceHeader&lt;/span>.&lt;span style="color:#a6e22e">Cap&lt;/span> = &lt;span style="color:#a6e22e">length&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sliceHeader&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span> = &lt;span style="color:#a6e22e">length&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sliceHeader&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = uintptr(&lt;span style="color:#a6e22e">ptr&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="map-实现">&lt;code>map&lt;/code> 实现&lt;/h1>
&lt;p>整个页面的内容对我来说都是新的：https://tiancaiamao.gitbooks.io/go-internals/content/zh/02.3.html
不过这个页面描述的内容和最新的 Golang source 有一定差别。&lt;/p>
&lt;p>读 &lt;code>HashMap&lt;/code> 的实现，里面的一些核心关键词：&lt;code>bucket&lt;/code>、&lt;code>overflow&lt;/code> 让我理解起来有些困难。查询 &lt;code>HashMap&lt;/code> 相关的一些资料后有了进一步了解。&lt;/p>
&lt;ol>
&lt;li>&lt;code>bucket&lt;/code> 一般使用某种 &lt;code>array&lt;/code> 管理，从 &lt;code>key&lt;/code> 经过 &lt;code>hash-function&lt;/code> 映射的 &lt;code>hash-value&lt;/code>（可能截取一部分，也可以视作 sub-hash，我自己编的）作为 &lt;code>index&lt;/code> 直接得到。一个 &lt;code>bucket&lt;/code> 中可能包含多个不同的 &lt;code>hash-value&lt;/code> ，它们截取那一部分得到的 &lt;code>index&lt;/code> 相同。因此 &lt;code>bucket&lt;/code> 会用一个数据结构管理这些冲突的值，可能是 &lt;code>linked-list&lt;/code> 或者 &lt;code>tree-map&lt;/code> 之类的。这些内部的数据结构中的 &lt;code>node&lt;/code> 存储着真正对应 &lt;code>map&lt;/code> 的 &lt;code>key\value&lt;/code> 对(pair)。&lt;/li>
&lt;li>如果 &lt;code>bucket&lt;/code> 太满了，比如元素的数量超过 &lt;code>bucket&lt;/code> 数量一定倍数（&lt;code>load factor&lt;/code>），则会进行扩容，所有元素都被 &lt;code>rehashed&lt;/code> 到一个新的值。&lt;/li>
&lt;li>采用这种方式实现 &lt;code>HashMap&lt;/code>，&lt;code>bucket&lt;/code> 可以有两种选择：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>Direct chaining&lt;/strong> 只存一个指向冲突元素集合的 &lt;code>header&lt;/code>&lt;/li>
&lt;li>&lt;strong>Seperate Chaining&lt;/strong> 在 &lt;code>bucket&lt;/code> 存一部分（一个）元素集合（Golang &lt;code>HashMap&lt;/code> 实现里放了 8 个），和一个指向剩下冲突元素集合的 &lt;code>header&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>上面 &lt;code>header&lt;/code> 指向的元素集合叫 &lt;code>overflow list&lt;/code> 或者 &lt;code>overflow some-other-data-structure&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>有了这些背景后，看代码应该会比较清晰了。&lt;/p>
&lt;p>目前 Golang 中的 &lt;code>bucket&lt;/code> 是为 &lt;code>insert&lt;/code> 操作优化的，找到第一个空余位置就可以插入，但是删除的时候要把所有相同 &lt;code>key&lt;/code> 的元素都删掉，要遍历 &lt;code>bucket&lt;/code> 的 &lt;code>overflow&lt;/code> 集合。&lt;/p>
&lt;p>如果 key 或者 value 小于 128 字节，那么它们是直接在 &lt;code>bucket&lt;/code> 存储值，否则存指向数据的指针。&lt;/p>
&lt;h1 id="nil-语义">&lt;code>nil&lt;/code> 语义&lt;/h1>
&lt;p>按照 Golang 规范，任何类型在未初始化时都对应一个零值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool&lt;/code> $\rightarrow$ &lt;code>true&lt;/code>&lt;/li>
&lt;li>&lt;code>integer&lt;/code> $\rightarrow$ &lt;code>0&lt;/code>&lt;/li>
&lt;li>&lt;code>string&lt;/code> $\rightarrow$ &lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>pointer&lt;/code>/&lt;code>function&lt;/code>/&lt;code>interface&lt;/code>/&lt;code>slice&lt;/code>/&lt;code>channel&lt;/code>/&lt;code>map&lt;/code> $\rightarrow$ &lt;code>nil&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="关于-interface">关于 &lt;code>interface{}&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#75715e">// v == nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#75715e">// i == nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#75715e">// i != nil
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关于-channel">关于 &lt;code>channel&lt;/code>&lt;/h2>
&lt;p>一些操作规则：&lt;/p>
&lt;ul>
&lt;li>读写一个 &lt;code>nil&lt;/code> 的 &lt;code>channel&lt;/code> 会立即阻塞&lt;/li>
&lt;li>读一个关闭的 &lt;code>channel&lt;/code> 会立刻返回一个 &lt;code>channel&lt;/code> 元素类型的零值，即 &lt;code>chan int&lt;/code> 会返回 &lt;code>0&lt;/code>&lt;/li>
&lt;li>写一个关闭的 &lt;code>channel&lt;/code> 会导致 &lt;code>panic&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="函数调用">函数调用&lt;/h1>
&lt;h2 id="汇编">汇编&lt;/h2>
&lt;p>可以看一下这个 Golang 的官方介绍页面：https://golang.org/doc/asm&lt;/p>
&lt;p>&lt;strong>add.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>add_amd64.s&lt;/strong> 或使用其他平台后缀，和 &lt;strong>add.go&lt;/strong> 在同一个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">TEXT&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">·&lt;/span>Add&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(SB),&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> a&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(FP),BX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> b&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>(FP),BP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ADDQ&lt;/span> BP,BX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> BX,res&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>(FP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">RET&lt;/span> ,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="golang-调用-c">Golang 调用 C&lt;/h2>
&lt;p>&lt;strong>add.c&lt;/strong> ，和 &lt;strong>add.go&lt;/strong> 在同一个目录&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">·&lt;/span>Add(uint64 a, uint64 b, uint64 ret) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FLUSH(&lt;span style="color:#f92672">&amp;amp;&lt;/span>ret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译这个包：&lt;code>go install add&lt;/code>&lt;/p>
&lt;p>C 文件中需要包含 &lt;code>runtime.h&lt;/code> 头文件。因为 Golang 使用特殊寄存器存放像全局 &lt;code>struct G&lt;/code> 和 &lt;code>struct M&lt;/code> ，包含这个文件可以让所有链接到 Go 的 C 文件感知这一点，避免编译器使用这些特定的寄存器做其他用途。&lt;/p>
&lt;p>上面示例中返回值为空，使用 &lt;code>ret&lt;/code> 作为返回值，&lt;code>FLUSH&lt;/code> 在 &lt;code>pkg/runtime/runtime.h&lt;/code> 中定义为 &lt;code>USED()&lt;/code> ，防止编译器优化掉对某个变量的赋值操作（因为看不到这个变量在后面其他地方使用了）。&lt;/p>
&lt;h2 id="函数调用时的内存布局">函数调用时的内存布局&lt;/h2>
&lt;p>Golang 中使用的 C 编译器是 plan9 的 C 编译器，与 gcc 有一定差异。
这个页面中有部分基础介绍：
&lt;a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.1.html">https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.1.html&lt;/a>&lt;/p>
&lt;p>如果返回多个值，&lt;code>func f(a, b int) (d, e int)&lt;/code> 内存布局如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>slot for e
slot for d
b
a
&amp;lt;- SP
&lt;/code>&lt;/pre>&lt;p>调用后为&lt;/p>
&lt;pre tabindex="0">&lt;code>slot for e
slot for d
b
a &amp;lt;- FP
PC &amp;lt;- SP
f&amp;#39;s stack
&lt;/code>&lt;/pre>&lt;p>plan9 的 C 汇编器对被调用函数的参数值的修改是会返回到调用函数中的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> BX,d&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>(FP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> BX,e&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>(FP)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="go-关键字">&lt;code>go&lt;/code> 关键字&lt;/h1>
&lt;p>&lt;code>f(1, 2, 3)&lt;/code> 的汇编:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CALL&lt;/span> f(SB)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>go f(1, 2, 3)&lt;/code> 的汇编：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVL&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PUSHQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>f(SB)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PUSHQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CALL&lt;/span> runtime.newproc(SB)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">POPQ&lt;/span> AX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">POPQ&lt;/span> AX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>12&lt;/code> 是参数占用的大小，&lt;code>runtime.newproc&lt;/code> 函数接受的参数为：参数大小、新的 goroutine 要运行的函数、函数的参数。&lt;code>runtime.newproc&lt;/code> 会新建一个栈空间，将栈参数的 12 个字节复制到新的栈空间，并让栈指针指向参数。可以看做 &lt;code>runtime.newproc(size, f, args)&lt;/code> 。&lt;/p>
&lt;h1 id="defer-关键字">&lt;code>defer&lt;/code> 关键字&lt;/h1>
&lt;p>&lt;code>return x&lt;/code> 不是原子语句，函数执行顺序为：&lt;/p>
&lt;ol>
&lt;li>给返回值赋值&lt;/li>
&lt;li>&lt;code>defer&lt;/code> 调用&lt;/li>
&lt;li>&lt;code>return&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>defer&lt;/code> 实现对应 &lt;code>runtime.deferproc&lt;/code>，其出现的地方插入指令 &lt;code>call runtime.deferproc&lt;/code> ，函数返回之前的地方，插入 &lt;code>call runtime.deferreturn&lt;/code> 。 goroutine 的控制结构中有一张表记录 &lt;code>defer&lt;/code>，表以栈行为运作。&lt;/p>
&lt;h1 id="continuous-stack">Continuous Stack&lt;/h1>
&lt;p>我也基本理解了思路，具体细节可以看：https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.5.html&lt;/p>
&lt;p>最后的 &lt;code>runtime.lessstack&lt;/code> 有些没看懂。&lt;/p>
&lt;h1 id="闭包">闭包&lt;/h1>
&lt;p>闭包中引用的变量不能在栈上分配，否则闭包函数返回的时候，栈上变量的地址就失效了。&lt;/p>
&lt;h2 id="逃逸分析escape-analyze">逃逸分析（escape analyze）&lt;/h2>
&lt;p>Golang 有个特性，可以自动识别哪些变量在栈上分配，哪些在堆上分配。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Cursor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">Cursor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">X&lt;/span> = &lt;span style="color:#ae81ff">500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">noinline&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>type.&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.Cursor&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(SB),(SP) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">取变量&lt;/span>c的类型&lt;span style="color:#960050;background-color:#1e0010">，也就是&lt;/span>Cursor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CALL&lt;/span> ,runtime.new(SB) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">调用&lt;/span>new函数&lt;span style="color:#960050;background-color:#1e0010">，相当于&lt;/span>new(Cursor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>(SP),AX &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">取&lt;/span>c.X的地址放到AX寄存器
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>,(AX) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">将&lt;/span>AX&lt;span style="color:#960050;background-color:#1e0010">存放的内存地址的值赋为&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> AX,&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.~r0&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>(FP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ADDQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>,SP
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在编译的过程中可以通过指令输出哪些变量逃逸了：&lt;code>go build --gcflags=-m main.go&lt;/code>&lt;/p>
&lt;h2 id="闭包结构体">闭包结构体&lt;/h2>
&lt;p>闭包将函数和它引用的环境表示为一个结构体：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Closure&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">F&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>()()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>整体思路是返回闭包的时候，返回一个结构体，包含闭包返回函数的地址和引用的环境中的变量地址。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>type.int&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(SB),(SP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CALL&lt;/span> ,runtime.new(SB) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">是不是很熟悉，这一段就是&lt;/span>i &lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> new(int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>type.struct &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span> F uintptr&lt;span style="color:#75715e">; A0 *int }+0(SB),(SP) // 这个结构体就是闭包的类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">CALL&lt;/span> ,runtime.new(SB) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">接下来相当于&lt;/span> new(Closure)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">PCDATA&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>(SP),AX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">NOP&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.func&lt;span style="color:#960050;background-color:#1e0010">·&lt;/span>&lt;span style="color:#ae81ff">001&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>(SB),BP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> BP,(AX) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">函数地址赋值给&lt;/span>Closure的F部分
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">NOP&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.&lt;span style="color:#f92672">&amp;amp;&lt;/span>i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>(SP),BP &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">将堆中&lt;/span>new的变量i的地址赋值给Closure的值部分
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> BP,&lt;span style="color:#ae81ff">8&lt;/span>(AX)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">MOVQ&lt;/span> AX,&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.~r1&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">40&lt;/span>(FP)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ADDQ&lt;/span> &lt;span style="color:#66d9ef">$&lt;/span>&lt;span style="color:#ae81ff">24&lt;/span>,SP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">RET&lt;/span> ,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="引用">引用&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://tiancaiamao.gitbooks.io/go-internals">https://tiancaiamao.gitbooks.io/go-internals&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://gki.informatik.uni-freiburg.de/teaching/ss11/theoryI/07_Hashing_Chaining.pdf">http://gki.informatik.uni-freiburg.de/teaching/ss11/theoryI/07_Hashing_Chaining.pdf&lt;/a>&lt;/li>
&lt;/ol>
- https://blog.formalscience.com/2018/01/14/golang-%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E4%B8%9C%E8%A5%BF/ -</description></item><item><title>使用 Nvidia 显卡加速机器学习算法的一些资料</title><link>https://blog.formalscience.com/2018/01/13/%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/</link><pubDate>Sat, 13 Jan 2018 13:14:09 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/13/%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/13/%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/ -&lt;p>Nnidia 显卡可以用来加速机器学习算法（特别是深度学习），但安装驱动过程中总会碰到这样或者那样的问题。
一个难点是安装库的时候没有下载链接，比如 Nvidia 的 Cuda/cuDNN 主页经常会出现这样的提示：&lt;/p>
&lt;pre tabindex="0">&lt;code>NVIDIA Developer Site is under going maintenance.
The site will be back by shortly.
We apologize for any inconvenience.
&lt;/code>&lt;/pre>&lt;p>虽然不能按照官方路径进行下载，但经过搜索总能找到一些入口。下面是我收集的一些链接：&lt;/p>
&lt;ul>
&lt;li>cuDNN
&lt;ul>
&lt;li>下载页面：https://developer.nvidia.com/rdp/cudnn-download&lt;/li>
&lt;li>这个页面需要注册 Nvidia 开发者账号并登录，当前包含从 &lt;code>cuDNN v5.1&lt;/code> 到 &lt;code>cuDNN 7.0.5&lt;/code> 的版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CUDA
&lt;ul>
&lt;li>下载页面：https://developer.nvidia.com/cuda-toolkit-archive&lt;/li>
&lt;li>这个页面需要注册 Nvidia 开发者账号并登录，当前包含从 &lt;code>CUDA Toolkit 1.0&lt;/code> 到 &lt;code>CUDA Toolkit 9.0&lt;/code> 的版本，最新的 &lt;code>CUDA Toolkit 9.1&lt;/code> 的链接仍然指向&lt;em>正在维护&lt;/em>的提示页面&lt;/li>
&lt;li>Ubuntu 16.04 &lt;code>CUDA Toolkit 9.1&lt;/code> 下载链接：http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb&lt;/li>
&lt;li>此外可以在这个页面找到其他 Linux 发行版的安装包：http://developer.download.nvidia.com/compute/cuda/repos/&lt;/li>
&lt;li>Windows 10 版本的 &lt;code>CUDA Toolkit 9.1&lt;/code> 我成功下载过一次，但是和当前的 &lt;code>TensorFlow 1.4&lt;/code> 不兼容，刚才发现之前组合出来的下载链接无效了。如果找到链接会补充上。当前可用 &lt;code>cuDNN v6.1&lt;/code> 和 &lt;code>CUDA Toolkit 8.0 GA2&lt;/code> 版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
- https://blog.formalscience.com/2018/01/13/%E4%BD%BF%E7%94%A8-nvidia-%E6%98%BE%E5%8D%A1%E5%8A%A0%E9%80%9F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%96%99/ -</description></item><item><title>一些有趣的项目 Protocol Labs</title><link>https://blog.formalscience.com/2018/01/12/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/</link><pubDate>Fri, 12 Jan 2018 21:37:21 +0000</pubDate><guid>https://blog.formalscience.com/2018/01/12/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/</guid><description>不是追风少年 https://blog.formalscience.com/2018/01/12/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/ -&lt;p>最初在 3Blue1Brown 发布的一个介绍区块链原理的视频中看到了这个组织的连接。发现比较有意思，给大家分享一下~&lt;/p>
&lt;p>项目的使命：&lt;/p>
&lt;blockquote>
&lt;p>We believe the internet has become humanity&amp;rsquo;s most important technology. We build protocols, systems, and tools to improve how it works. Today, we are focused on how we store, locate, and move information.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>我们相信互联网已成为人类最重要的技术。我们构建提升互联网工作能力的协议、系统和工具。当前我们集中在如何存储、定位和移动信息的工作上。&lt;/p>
&lt;/blockquote>
&lt;p>这段文字翻译得有点机器翻译风格。&lt;/p>
&lt;p>项目地址：https://protocol.ai/projects/ ，目前上面有 5 个项目：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Filecoin&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>加密货币，Miners 通过向网络提供存储空间来获取 &lt;code>Filecoin&lt;/code> ，使用者通过消耗 &lt;code>Filecoin&lt;/code> 来在&lt;strong>去中心化的&lt;/strong>网络中存储加密后的文件。&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>IPFS&lt;/strong> (InterPlanetary File System)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>一种新型协议，用来使网络去中心化。IPFS 通过内容寻址和数字签名来创建完全去中心化和分布式的应用。IPFS 使得网络更快、更安全以及更加开放。&lt;/li>
&lt;li>这是一段 YouTube 上的介绍视频：https://www.youtube.com/watch?v=8CMxDNuuAiQ ，介绍了 IPFS 的一些基本使用方法。根据我的理解，这是通过 content-address（immutable hash） 访问的分布式加密文件系统，可以通过命令行、网页界面等多种方式进行访问，有点类似 Samba，不过是分布式的。Siraj Raval 制作的一个视频：https://www.youtube.com/watch?v=BA2rHlbB5i0 ，也对 IPFS 进行了介绍，主要对 &lt;strong>Why&lt;/strong> 的部分进行阐述。
&lt;ul>
&lt;li>带宽，多个客户端对中心节点访问&lt;/li>
&lt;li>延迟&lt;/li>
&lt;li>弹性 Resiliency，中心节点失效（网络断开或者数据删除）后无法进行数据访问&lt;/li>
&lt;li>中心化 Centralization，主流网站掌控所有数据，用户无从得知数据的使用方式，此外会受到政府或者其他势力的干扰。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用的技术：Chord、DHT、bit swap(bittorrent mechanism)、MerkleDAG&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>Libp2p&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>一个模块化的网络栈，把一系列传输协议和 peer-to-peer 协议整合在一起，方便开发者构建大型、健壮的 p2p 网络&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>IPLD&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>去中心化网络（content-addressable web）的数据模型，它通过加密哈希值的方式连接了所有数据，使得数据的遍历和彼此链接更加容易。网站的示意图中连接了 bitcoin、以太坊、IPFS、Git Repo 等。&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;strong>Multiformats&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>这个项目是面向未来验证系统（future-proof systems）的协议集合， 自描述的格式可以让你的系统可以互操作和具有可升级性。&lt;/li>
&lt;/ul>
- https://blog.formalscience.com/2018/01/12/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE_protocol_labs/ -</description></item><item><title>Bar</title><link>https://blog.formalscience.com/2017/11/11/2017-11-11-bar/</link><pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.formalscience.com/2017/11/11/2017-11-11-bar/</guid><description>不是追风少年 https://blog.formalscience.com/2017/11/11/2017-11-11-bar/ -&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blog.formalscience.com/nothing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nothing&lt;/span>.&lt;span style="color:#a6e22e">bar&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I dreamed about death this morning.&lt;/p>
&lt;p>I dreamed about false dreams this morning.&lt;/p>
&lt;p>I woke up tired.&lt;/p>
&lt;p>I made some coffee with milk or without milk.&lt;/p>
&lt;p>I saw some videos on Youtube and Bilibili.&lt;/p>
&lt;p>I wrote this blog.&lt;/p>
- https://blog.formalscience.com/2017/11/11/2017-11-11-bar/ -</description></item></channel></rss>